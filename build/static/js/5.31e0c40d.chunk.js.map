{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","contexts/PastLotteryDataContext.tsx","utils/lotteryUtils.js","hooks/useWeb3.ts","config/constants/index.ts","hooks/useContract.ts","views/MkatLottery/components/Hero.tsx","views/MkatLottery/components/Divider.tsx","utils/formatBalance.ts","hooks/useTickets.ts","views/MkatLottery/components/Loading.tsx","views/MkatLottery/components/TicketCard/UserTicketsModal.tsx","config/constants/tokenInfo.ts","views/MkatLottery/components/YourPrizesCard/PrizesWonContent.tsx","hooks/useBuyLottery.ts","views/MkatLottery/components/YourPrizesCard/NoPrizesContent.tsx","views/MkatLottery/components/YourPrizesCard/index.tsx","components/UnlockButton.tsx","views/MkatLottery/components/UnlockWalletCard.tsx","hooks/useGetLotteryHasDrawn.ts","hooks/useTimer.ts","utils/erc20.ts","utils/callHelpers.ts","hooks/useTokenBalance.ts","components/Input/Input.tsx","components/TicketInput/TicketInput.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","views/MkatLottery/components/TicketCard/BuyTicketModal.tsx","views/MkatLottery/components/TicketCard/PurchaseWarningModal.tsx","views/MkatLottery/components/TicketCard/TicketActions.tsx","hooks/useAllowance.ts","hooks/useApprove.ts","utils/getTimePeriods.ts","views/MkatLottery/helpers/CountdownHelpers.ts","views/MkatLottery/components/TicketCard/index.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/MkatLottery/components/PrizeGrid.tsx","views/MkatLottery/components/TotalPrizesCard/index.tsx","views/MkatLottery/components/WinningNumbers.tsx","views/MkatLottery/components/HowItWorks.tsx","views/MkatLottery/NextDrawPage.tsx","views/MkatLottery/PastDrawsPage.tsx","views/MkatLottery/Lottery.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","React","createContext","mostRecentLotteryNumber","historyError","historyData","multiCall","abi","calls","a","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","res","i","newCalls","slice","calldata","map","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","concat","index","decodeFunctionResult","multiBuyForMkat","lotteryContract","price","numbersList","account","multiBuy","BigNumber","times","pow","toString","send","from","on","tx","transactionHash","console","error","getTickets","ticketsContract","customLotteryNum","issueIndex","issueIdex","getTicketsAmount","calls1","Array","apply","options","address","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","tickets","getLotteryStatus","balanceOf","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","rewards","finanltokenIds","r","getTotalClaim","drawed","calls4","claim","reduce","p","c","sum","getTotalRewards","getMax","maxNumber","getAllocation","allocation","firstReward","secondReward","thirdReward","getLotteryIssueIndex","getMatchingRewardLengthForMkat","matchNumber","pricePerTicket","historyAmount","amount","getWinningNumbers","numbers","parseInt","historyNumbers","winningNumbers","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","setweb3","useEffect","current","farmsConfig","farm","isCommunity","tokenSymbol","useContract","contractOptions","contract","setContract","useERC20","erc20","useCakeForMkat","getCakeAddressForMkat","useLottery","lottery","getLotteryAddress","useLotteryForMkat","getLotteryAddressForMkat","useLotteryTicketForMkat","lotteryTicket","getLotteryTicketAddressForMkat","Title","styled","Heading","attrs","as","size","theme","colors","secondary","Blurb","Text","StyledHero","div","StyledContainer","Container","mediaQueries","sm","LeftWrapper","lg","RightWrapper","Hero","TranslateString","textSubtle","getBalanceNumber","balance","decimals","displayBalance","dividedBy","toNumber","getFullDisplayBalance","toFixed","useTicketsForMkat","lotteryNumber","setTickets","useRefresh","fastRefresh","fetchBalance","useTotalClaimForMkat","claimAmount","setClaimAmount","claimLoading","setClaimLoading","useCallback","useWinningNumbersForMkat","winngNumbers","setWinningNumbers","useMatchingRewardLengthForMkat","matchingNumbers","setMatchingNumbers","matchedNumbaers","StyledLoading","Loading","RewardP","TicketsList","props","primary","StyledButton","Button","spacing","UserTicketsModal","myTicketNumbers","onDismiss","winNumbers","rewardMatch","number","n","listItems","emoji","join","title","variant","onClick","tokenInfo","tokenName","WinningsWrapper","IconWrapper","StyledCardActions","StyledCardContentInner","PrizesWonContent","requestedClaim","setRequestedClaim","onMultiClaim","lotteryTicketContract","txHash","useMultiClaimLotteryForMkat","useModal","onPresentMyTickets","handleClaim","winnings","color","style","marginRight","fullWidth","disabled","Wrapper","TextWrapper","StyledText","Image","img","md","NoPrizesContent","src","alt","StyledCard","Card","isDisabled","textDisabled","YourPrizesCard","isAWin","isActive","UnlockButton","connect","reset","onPresentConnectModal","useWalletModal","StyledCardBody","CardBody","StyledHeading","UnlockWalletCard","useGetLotteryHasDrawnForMkat","lotteryHasDrawn","setLotteryHasDrawn","state","fetchLotteryStatus","useCurrentTime","Date","getTime","currentMillis","setCurrentMillis","timerID","setInterval","prevMillis","clearInterval","getContract","provider","getAllowance","lpContract","masterChefContract","allowance","getTokenBalance","tokenAddress","userAddress","window","localStorage","getItem","approve","ethers","constants","MaxUint256","useTokenBalance","setBalance","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","max","symbol","availableSymbol","onSelectMax","toLocaleString","Spacer","s","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","Children","toArray","child","BuyTicketModal","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","maxTickets","onMultiBuy","useMultiBuyLotteryForMkat","setMax","fetchMax","useMaxNumberForMkat","log","handleBuy","Math","floor","random","handleSelectMax","Number","e","currentTarget","Tips","Announce","Final","WarningModal","CardActions","TicketCard","requestedApproval","setRequestedApproval","setAllowance","cakeContract","fetchAllowance","refreshInterval","useLotteryAllowanceForMkat","onApprove","useLotteryApproveForMkat","cakeBalance","ticketsLength","PurchaseWarningModal","onPresentApprove","onPresentBuy","handleApprove","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","timeLeft","years","months","days","hours","minutes","hoursAndMinutesString","getTicketSaleTime","msUntilNextTicketSale","getNextTicketSaleTime","isSecondCard","CardHeader","TicketCountWrapper","timeUntilTicketSale","fontSize","TicketActions","ExpandableSectionButton","expanded","aria-label","role","bold","defaultProps","Grid","pastDraw","RightAlignedText","RightAlignedHeading","GridItem","marginBottom","PastDrawGridItem","PrizeGrid","lotteryPrizeAmount","jackpotMatches","twoTicketMatches","threeTicketMatches","distribution","distrubution","setDistribution","useAllocation","fourMatchesAmount","threeMatchesAmount","twoMatchesAmount","burnAmount","CardHeading","Right","Left","PrizeCountWrapper","ExpandingWrapper","showFooter","TotalPrizesCard","setShowFooter","setRewards","useTotalRewardsForMkat","lotteryPrizeWithCommaSeparators","currentLotteryNumber","PastLotteryDataContext","mb","alignItems","justifyContent","height","width","fontWeight","Row","RowNoPadding","Column","CenteredText","CenteredTextWithPadding","TicketNumberBox","StyledCardHeader","CardWrapper","WinningNumbers","MatchedNumber4","MatchedNumber3","MatchedNumber2","LayoutWrapper","StyledImage","HowItWorks","Link","Cards","BaseLayout","SecondCardColumnWrapper","NextDrawPage","CommingSoon","PastDrawsPage","Lottery","activeIndex","setHistoryData","setHistoryError","setCurrentLotteryNumber","setMostRecentLotteryNumber","fetch","then","response","json","catch","previousLotteryNumber","getInitialLotteryIndex","Page","Divider","Provider"],"mappings":"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","file":"static/js/5.31e0c40d.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import React from 'react'\n\nexport interface PastLotteryDataState {\n  mostRecentLotteryNumber: number\n  currentLotteryNumber: number\n  historyError: boolean\n  historyData: Array<any>\n}\n\nexport default React.createContext({\n  mostRecentLotteryNumber: 0,\n  historyError: false,\n  historyData: [],\n} as PastLotteryDataState)\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { getMulticallAddress } from './addressHelpers'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const multiBuyForMkat = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(9)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIdex) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finanltokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finanltokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finanltokenIds.length > 200) {\n    finanltokenIds = finanltokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finanltokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIdex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length }).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenids = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIdex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenids.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getAllocation = async (lotteryContract) => {\n  const firstReward = await lotteryContract.methods.allocation(0).call()\n  const secondReward = await lotteryContract.methods.allocation(1).call()\n  const thirdReward = await lotteryContract.methods.allocation(2).call()\n  return [firstReward, secondReward, thirdReward]\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  const pricePerTicket = 200\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIdex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\n    return amount / 1e18 / pricePerTicket\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getMatchingRewardLengthForMkat = async (lotteryContract, matchNumber) => {\n  const pricePerTicket = 200\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIdex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\n    return amount / 1e8 / pricePerTicket\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getBNBRewardChefAddress, getCakeAddress, getLotteryAddress, getLotteryAddressForMkat, getLotteryTicketAddress, getLotteryTicketAddressForMkat, getCakeAddressForMkat } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport bnbRewardChef from 'config/abi/bnbRewardChef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useCakeForMkat = () => {\n  return useERC20(getCakeAddressForMkat())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryForMkat = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddressForMkat())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useLotteryTicketForMkat = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddressForMkat())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useBNBRewardChef = () => {\n  const abi = (bnbRewardChef as unknown) as AbiItem\n  return useContract(abi, getBNBRewardChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from 'MOONKAT_uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\nimport LotteryProgress from './LotteryProgress'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  background-image: linear-gradient(180deg, #53dee9 0%, #1fc7d4 100%);\n  padding-bottom: 40px;\n  padding-top: 40px;\n`\n\nconst StyledContainer = styled(Container)`\n  display: flex;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst LeftWrapper = styled.div`\n  flex: 1;\n  padding-right: 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  padding-left: 0;\n  margin-top: 16px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    padding-left: 24px;\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-left: 32px;\n  }\n`\n\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <LeftWrapper>\n          <Title>{TranslateString(999, 'The MKAT Lottery')}</Title>\n          <Blurb>{TranslateString(999, 'Buy tickets with MKAT')}</Blurb>\n          <Blurb>{TranslateString(999, 'Win if 2, 3, or 4 of your ticket numbers match!')}</Blurb>\n        </LeftWrapper>\n        <RightWrapper>\n          {/* <LotteryProgress /> */}\n        </RightWrapper>\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryForMkat, useLotteryTicket, useLotteryTicketForMkat } from 'hooks/useContract'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getMatchingRewardLengthForMkat,\n  getWinningNumbers,\n  getTickets,\n  getAllocation,\n} from '../utils/lotteryUtils'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTicketsForMkat = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicketForMkat()\n  const lotteryContract = useLotteryForMkat()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalRewardsForMkat = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const lotteryContract = useLotteryForMkat()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  console.log('lotteryPrizeAmount', rewards.toString())\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n\n  return { claimLoading, claimAmount }\n}\n\nexport const useTotalClaimForMkat = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicketForMkat()\n  const lotteryContract = useLotteryForMkat()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n\n  return { claimLoading, claimAmount }\n}\n\nexport const useWinningNumbers = () => {\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winngNumbers\n}\n\nexport const useWinningNumbersForMkat = () => {\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLotteryForMkat()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winngNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport const useMatchingRewardLengthForMkat = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLotteryForMkat()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLengthForMkat(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport const useAllocation = () => {\n  const [distrubution, setDistribution] = useState([0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const [firstReward, secondReward, thirdReward] = await getAllocation(lotteryContract)\n      setDistribution([firstReward, secondReward, thirdReward])\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return distrubution\n}\n\nexport default useTickets\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Loading: React.FC = () => <StyledLoading />\n\nconst StyledLoading = styled.div`\n  border: 8px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 8px solid #ddd;\n  border-bottom: 8px solid #ddd;\n  width: 20px;\n  height: 20px;\n  -webkit-animation: spin 2s linear infinite;\n  animation: spin 2s linear infinite;\n  @-webkit-keyframes spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`\n\nexport default Loading","import React, { useCallback } from 'react'\nimport { Button, Modal } from 'MOONKAT_uikit'\nimport styled from 'styled-components'\nimport { useWinningNumbersForMkat } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\n\ninterface UserTicketsModalProps {\n  myTicketNumbers: Array<any>\n  from?: string\n  onDismiss?: () => void\n}\n\nconst UserTicketsModal: React.FC<UserTicketsModalProps> = ({ myTicketNumbers, onDismiss, from }) => {\n  const winNumbers = useWinningNumbersForMkat()\n  const TranslateString = useI18n()\n  const rewardMatch = useCallback(\n    (number) => {\n      let n = 0\n      for (let i = winNumbers.length - 1; i >= 0; i--) {\n        // eslint-disable-next-line eqeqeq\n        if (winNumbers[i] == number[i]) n++\n      }\n      return n\n    },\n    [winNumbers],\n  )\n\n  const listItems = myTicketNumbers.map((number, index) => {\n    if (rewardMatch(number[0]) > 1 && from !== 'buy') {\n      const emoji = new Array(rewardMatch(number[0]) + 1).join('🤑')\n      return (\n        // eslint-disable-next-line react/no-array-index-key\n        <RewardP key={index}>\n          {emoji}\n          {number.toString()}\n          {emoji}\n        </RewardP>\n      )\n    }\n    // eslint-disable-next-line react/no-array-index-key\n    return <p key={index}>{number.toString()}</p>\n  })\n\n  return (\n    <Modal title={TranslateString(490, `My Tickets (Total: ${myTicketNumbers.length})`)} onDismiss={onDismiss}>\n      <TicketsList>\n        <h2>{listItems}</h2>\n      </TicketsList>\n      <StyledButton variant=\"secondary\" onClick={onDismiss}>\n        {TranslateString(438, 'Close')}\n      </StyledButton>\n    </Modal>\n  )\n}\n\nconst RewardP = styled.div`\n  color: #ff8c28;\n`\n\nconst TicketsList = styled.div`\n  text-align: center;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: ${(props) => props.theme.spacing[2]}px;\n`\n\nexport default UserTicketsModal","import { TokenInfo } from './types'\n\nconst tokenInfo: TokenInfo[] = [\n  {\n    id: 0,\n    tokenName: 'MKAT',\n    contract: '0x5f6Ef6608B3deb84A38d12Bce535Fdd6aB195A66',\n    decimals: 9,\n  },\n]\n\nexport default tokenInfo\n","import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Won, useModal } from 'MOONKAT_uikit'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMultiClaimLotteryForMkat } from 'hooks/useBuyLottery'\nimport { useTicketsForMkat, useTotalClaimForMkat } from 'hooks/useTickets'\nimport Loading from '../Loading'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\nimport tokenInfo from '../../../../config/constants/tokenInfo'\n\nconst WinningsWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n`\n\nconst IconWrapper = styled.div`\n  margin-bottom: 16px;\n  svg {\n    width: 80px;\n    height: 80px;\n  }\n`\n\nconst StyledCardActions = styled.div`\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: ${(props) => props.theme.spacing[1]}px;\n`\n\nconst PrizesWonContent: React.FC = () => {\n  const [requestedClaim, setRequestedClaim] = useState(false)\n  const TranslateString = useI18n()\n  const { claimLoading, claimAmount } = useTotalClaimForMkat()\n  const { onMultiClaim } = useMultiClaimLotteryForMkat()\n  const tickets = useTicketsForMkat()\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiClaim, setRequestedClaim])\n\n  const winnings = getBalanceNumber(claimAmount, tokenInfo[0].decimals).toFixed(2)\n\n  return (\n    <StyledCardContentInner>\n      <IconWrapper>\n        <Won />\n      </IconWrapper>\n      <Heading as=\"h3\" size=\"lg\" color=\"secondary\">\n        {TranslateString(999, 'You won!')}\n      </Heading>\n      {claimLoading && <Loading />}\n      {!claimLoading && (\n        <>\n          <WinningsWrapper>\n            <Heading as=\"h4\" size=\"xl\" style={{ marginRight: '6px' }}>\n              {winnings}\n            </Heading>\n            <Heading as=\"h4\" size=\"lg\">\n              MKAT\n            </Heading>\n          </WinningsWrapper>\n        </>\n      )}\n      <StyledCardActions>\n        <Button fullWidth disabled={requestedClaim} onClick={handleClaim}>\n          {TranslateString(999, 'Collect')}\n        </Button>\n      </StyledCardActions>\n      <StyledButton variant=\"text\" onClick={onPresentMyTickets}>\n        {TranslateString(432, 'View your tickets')}\n      </StyledButton>\n    </StyledCardContentInner>\n  )\n}\n\nexport default PrizesWonContent","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery, useLotteryForMkat, useLotteryTicket, useLotteryTicketForMkat } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy, multiBuyForMkat } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiClaimLotteryForMkat = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLotteryForMkat()\n  const lotteryTicketContract = useLotteryTicketForMkat()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMultiBuyLotteryForMkat = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLotteryForMkat()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuyForMkat(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n\nexport const useMaxNumberForMkat = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLotteryForMkat()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, useModal } from 'MOONKAT_uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useTicketsForMkat } from 'hooks/useTickets'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst Wrapper = styled.div`\n  display: flex;\n`\n\nconst TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledText = styled(Text)`\n  padding-left: 12px;\n`\n\nconst Image = styled.img`\n  margin-right: 6px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 20px;\n  }\n`\nconst StyledButton = styled(Button)`\n  padding: 0 12px;\n  height: unset;\n`\n\nconst NoPrizesContent: React.FC = () => {\n  const TranslateString = useI18n()\n  const tickets = useTicketsForMkat()\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n\n  return (\n    <Wrapper>\n      <Image src=\"/images/no-prize.svg\" alt=\"no prizes won\" />\n      <TextWrapper>\n        <StyledText color=\"textDisabled\">{TranslateString(999, 'Sorry, no prizes to collect')}</StyledText>\n        <StyledButton variant=\"text\" onClick={onPresentMyTickets}>\n          {TranslateString(432, 'View your tickets')}\n        </StyledButton>\n      </TextWrapper>\n    </Wrapper>\n  )\n}\n\nexport default NoPrizesContent","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from 'MOONKAT_uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalClaimForMkat } from 'hooks/useTickets'\nimport PrizesWonContent from './PrizesWonContent'\nimport NoPrizesContent from './NoPrizesContent'\nimport tokenInfo from '../../../../config/constants/tokenInfo'\n\nconst StyledCard = styled(Card)`\n  ${(props) =>\n    props.isDisabled\n      ? `  \n        margin-top: 16px;\n        background-color: unset;\n        box-shadow: unset;\n        border: 1px solid ${props.theme.colors.textDisabled};\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 24px;\n        }\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 32px;\n        }\n        `\n      : ``}\n`\n\nconst YourPrizesCard: React.FC = () => {\n  const { claimAmount } = useTotalClaimForMkat()\n\n  const winnings = getBalanceNumber(claimAmount, tokenInfo[0].decimals)\n  const isAWin = winnings > 0\n\n  return (\n    <StyledCard isDisabled={!isAWin} isActive={isAWin}>\n      <CardBody>{isAWin ? <PrizesWonContent /> : <NoPrizesContent />}</CardBody>\n    </StyledCard>\n  )\n}\n\nexport default YourPrizesCard","import React from 'react'\nimport { Button, useWalletModal } from 'MOONKAT_uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Ticket } from 'MOONKAT_uikit'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst StyledHeading = styled(Heading)`\n  margin: 16px 0;\n`\n\nconst IconWrapper = styled.div`\n  svg {\n    width: 80px;\n    height: 80px;\n  }\n`\n\nconst UnlockWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <StyledCardBody>\n        <IconWrapper>\n          <Ticket />\n        </IconWrapper>\n        <StyledHeading size=\"md\">{TranslateString(999, 'Unlock wallet to access lottery')}</StyledHeading>\n        <UnlockButton />\n      </StyledCardBody>\n    </Card>\n  )\n}\n\nexport default UnlockWalletCard","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery, useLotteryForMkat } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  useEffect(() => {\n    if (account && lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [account, lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport const useGetLotteryHasDrawnForMkat = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const { account } = useWallet()\n  const lotteryContract = useLotteryForMkat()\n\n  useEffect(() => {\n    if (account && lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [account, lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","import { useState, useEffect } from 'react'\n\nexport const useCurrentTime = () => {\n  const [currentMillis, setCurrentMillis] = useState(new Date().getTime())\n\n  useEffect(() => {\n    const tick = () => {\n      setCurrentMillis((prevMillis) => prevMillis + 1000)\n    }\n\n    const timerID = setInterval(() => tick(), 1000)\n\n    return () => clearInterval(timerID)\n  }, [])\n\n  return currentMillis\n}\n\nexport default useCurrentTime\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\n\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nlet referer=\"0x0000000000000000000000000000000000000000\" ;\nif (window.localStorage.getItem(\"referer\"))\n{   referer= window.localStorage.getItem(\"referer\");\n    // alert(referer);\n   // console.log(\"referer=\"+referer);\n}\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n// address 0: \"0x0000000000000000000000000000000000000000\"\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  let decimals = 18\n  if (pid === 7) {\n    decimals = 8\n  }\n \n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString(),referer)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const stakeForBNB = async (bnbRewardChefContract, amount, account) => {\n\n  return bnbRewardChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),referer)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), referer)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  let decimals = 18\n  if (pid === 7) {\n    decimals = 8\n  }\n \n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstakeForBNB = async (bnbRewardChefContract, amount, account) => {\n\n  return bnbRewardChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0',referer)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvestBNB = async (bnbRewardChefContract, account) => {\n  return bnbRewardChefContract.methods\n    .deposit('0',referer)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0', referer)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from 'MOONKAT_uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  onSelectMax?: () => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTokenInput>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from 'MOONKAT_uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLotteryForMkat, useMaxNumberForMkat } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\nimport tokenInfo from 'config/constants/tokenInfo'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const pricePerTicket = 20000\n  const permittedMaxTickets = 50\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, tokenInfo[0].decimals)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(new BigNumber(pricePerTicket)), tokenInfo[0].decimals))\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLotteryForMkat()\n  const maxNumber = useMaxNumberForMkat()\n  console.log('val:', val)\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy(pricePerTicket.toString(), numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > permittedMaxTickets) {\n      setVal(permittedMaxTickets.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * pricePerTicket\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"CAKE\"\n      />\n      <div>\n        <Tips>{TranslateString(999, `Your amount must be a multiple of ${pricePerTicket} MKAT`)}</Tips>\n        <Tips>{TranslateString(999, `1 Ticket = ${pricePerTicket} MKAT`)}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            999,\n            'Ticket purchases are not refundable. Your MKAT cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} MKAT`)}</Final>\n      </div>\n      <ModalActions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          fullWidth\n          disabled={pendingTx || parseInt(val) > Number(maxTickets) || parseInt(val) > permittedMaxTickets || parseInt(val) < 1}\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`","import React from 'react'\nimport { Button, Modal } from 'MOONKAT_uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {TranslateString(468, 'Lottery ticket purchases are not refundable.')}\n        <br />\n        {TranslateString(470, 'Your MKAT will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burnedafter the draw.')}\n        <br />\n        {TranslateString(\n          474,\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button fullWidth onClick={onDismiss}>\n          {TranslateString(476, 'I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal","import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal } from 'MOONKAT_uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetLotteryHasDrawnForMkat } from 'hooks/useGetLotteryHasDrawn'\nimport { useLotteryAllowanceForMkat } from 'hooks/useAllowance'\nimport { useLotteryApproveForMkat } from 'hooks/useApprove'\nimport { useTicketsForMkat } from 'hooks/useTickets'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { getCakeAddressForMkat } from 'utils/addressHelpers'\nimport BuyTicketModal from './BuyTicketModal'\nimport MyTicketsModal from './UserTicketsModal'\nimport PurchaseWarningModal from './PurchaseWarningModal'\n\nconst CardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    justify-content: space-between;\n  }\n`\n\nconst TicketCard: React.FC = () => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const TranslateString = useI18n()\n  const allowance = useLotteryAllowanceForMkat()\n  const { onApprove } = useLotteryApproveForMkat()\n  const lotteryHasDrawn = useGetLotteryHasDrawnForMkat()\n  const cakeBalance = useTokenBalance(getCakeAddressForMkat())\n\n  const tickets = useTicketsForMkat()\n  const ticketsLength = tickets.length\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const [onPresentBuy] = useModal(<BuyTicketModal max={cakeBalance} tokenName=\"CAKE\" />)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n      onPresentApprove()\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, onPresentApprove])\n\n  const renderLotteryTicketButtons = () => {\n    if (!allowance.toNumber()) {\n      return (\n        <>\n          <Button fullWidth disabled>\n            {TranslateString(432, 'View your tickets')}\n          </Button>\n          <Button fullWidth disabled={requestedApproval} onClick={handleApprove}>\n            {TranslateString(999, 'Approve MKAT')}\n          </Button>\n        </>\n      )\n    }\n    return (\n      <>\n        <Button\n          style={{ marginRight: '8px' }}\n          fullWidth\n          disabled={ticketsLength === 0}\n          variant=\"secondary\"\n          onClick={onPresentMyTickets}\n        >\n          {TranslateString(432, 'View your tickets')}\n        </Button>\n        <Button id=\"lottery-buy-start\" fullWidth onClick={onPresentBuy}>\n          {TranslateString(430, 'Buy ticket')}\n        </Button>\n      </>\n    )\n  }\n\n  return (\n    <CardActions>\n      {lotteryHasDrawn ? (\n        <Button disabled> {TranslateString(999, 'On sale soon')}</Button>\n      ) : (\n        renderLotteryTicketButtons()\n      )}\n    </CardActions>\n  )\n}\n\nexport default TicketCard","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useCakeForMkat, useLottery, useLotteryForMkat } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\nexport const useLotteryAllowanceForMkat = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLotteryForMkat()\n  const cakeContract = useCakeForMkat()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery, useCakeForMkat, useLotteryForMkat } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport const useLotteryApproveForMkat = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCakeForMkat()\n  const lotteryContract = useLotteryForMkat()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import getTimePeriods from 'utils/getTimePeriods'\n\n// lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\nconst lotteryDrawHoursUtc = [2, 14]\n\nconst getClosestLotteryHour = (currentHour) => {\n  switch (true) {\n    case currentHour < lotteryDrawHoursUtc[0] || currentHour >= lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[0]\n    case currentHour < lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[1]\n    default:\n      return 0\n  }\n}\n\nconst getNextLotteryDrawTime = (currentMillis) => {\n  const date = new Date(currentMillis)\n  const currentHour = date.getUTCHours()\n  const nextLotteryHour = getClosestLotteryHour(currentHour)\n  // next lottery is tomorrow if the next lottery is at 2am UTC...\n  // ...and current time is between 02:00am & 23:59pm UTC\n  const nextLotteryIsTomorrow = nextLotteryHour === 2 && currentHour >= 2 && currentHour <= 23\n  let millisTimeOfNextDraw\n\n  if (nextLotteryIsTomorrow) {\n    const tomorrow = new Date(currentMillis)\n    const nextDay = tomorrow.getUTCDate() + 1\n    tomorrow.setUTCDate(nextDay)\n    millisTimeOfNextDraw = tomorrow.setUTCHours(nextLotteryHour, 0, 0, 0)\n  } else {\n    millisTimeOfNextDraw = date.setUTCHours(nextLotteryHour, 0, 0, 0)\n  }\n\n  return millisTimeOfNextDraw\n}\n\n// @ts-ignore\nconst getNextTicketSaleTime = (currentMillis) => (parseInt(currentMillis / 3600000) + 1) * 3600000\nconst hoursAndMinutesString = (hours, minutes) => `${parseInt(hours)}h, ${parseInt(minutes)}m`\n\nexport const getTicketSaleTime = (currentMillis): string => {\n  const nextTicketSaleTime = getNextTicketSaleTime(currentMillis)\n  const msUntilNextTicketSale = nextTicketSaleTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilNextTicketSale / 1000)\n  const { hours } = getTimePeriods(msUntilNextTicketSale / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getLotteryDrawTime = (currentMillis): string => {\n  const nextLotteryDrawTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = nextLotteryDrawTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilLotteryDraw / 1000)\n  const { hours } = getTimePeriods(msUntilLotteryDraw / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getTicketSaleStep = () => (1 / 12) * 100\n\nexport const getLotteryDrawStep = (currentMillis) => {\n  const msBetweenLotteries = 43200000\n  const endTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = endTime - currentMillis\n  const percentageRemaining = (msUntilLotteryDraw / msBetweenLotteries) * 100\n  return 100 - percentageRemaining\n}","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, TicketRound, Text, Heading } from 'MOONKAT_uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetLotteryHasDrawnForMkat } from 'hooks/useGetLotteryHasDrawn'\nimport { useTicketsForMkat } from 'hooks/useTickets'\nimport { useCurrentTime } from 'hooks/useTimer'\nimport TicketActions from './TicketActions'\nimport { getTicketSaleTime } from '../../helpers/CountdownHelpers'\n\ninterface CardProps {\n  isSecondCard?: boolean\n}\n\nconst StyledCard = styled(Card)<CardProps>`\n  ${(props) =>\n    props.isSecondCard\n      ? `  \n        margin-top: 16px;\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 24px;\n        }\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 32px;\n        }\n        `\n      : ``}\n`\n\nconst CardHeader = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst TicketCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TicketCard: React.FC<CardProps> = ({ isSecondCard = false }) => {\n  const TranslateString = useI18n()\n  const lotteryHasDrawn = useGetLotteryHasDrawnForMkat()\n\n  const tickets = useTicketsForMkat()\n  const ticketsLength = tickets.length\n\n  const currentMillis = useCurrentTime()\n  const timeUntilTicketSale = lotteryHasDrawn && getTicketSaleTime(currentMillis)\n\n  return (\n    <StyledCard isSecondCard={isSecondCard}>\n      <CardBody>\n        <CardHeader>\n          <IconWrapper>\n            <TicketRound />\n          </IconWrapper>\n          {lotteryHasDrawn ? (\n            <TicketCountWrapper>\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {TranslateString(999, 'Until ticket sale:')}\n              </Text>\n              <Heading size=\"lg\">{timeUntilTicketSale}</Heading>\n            </TicketCountWrapper>\n          ) : (\n            <TicketCountWrapper>\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {TranslateString(999, 'Your tickets for this round')}\n              </Text>\n              <Heading size=\"lg\">{ticketsLength}</Heading>\n            </TicketCountWrapper>\n          )}\n        </CardHeader>\n        <TicketActions />\n      </CardBody>\n    </StyledCard>\n  )\n}\n\nexport default TicketCard","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'MOONKAT_uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { Heading, Text } from 'MOONKAT_uikit'\nimport { useAllocation } from 'hooks/useTickets'\n\nexport interface PrizeGridProps {\n  lotteryPrizeAmount?: number\n  pastDraw?: boolean\n  jackpotMatches?: number\n  twoTicketMatches?: number\n  threeTicketMatches?: number\n}\n\nconst Grid = styled.div<{ pastDraw?: boolean }>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => (props.pastDraw ? 3 : 2)}, 1fr);\n  grid-template-rows: repeat(4, auto);\n`\n\nconst RightAlignedText = styled(Text)`\n  text-align: right;\n`\n\nconst RightAlignedHeading = styled(Heading)`\n  text-align: right;\n`\n\nconst GridItem = styled.div<{ marginBottom?: string }>`\n  margin-bottom: ${(props) => (props.marginBottom ? props.marginBottom : '10px')};\n`\n\nconst PastDrawGridItem = styled(GridItem)`\n  transform: translate(-40%, 0%);\n`\nconst PrizeGrid: React.FC<PrizeGridProps> = ({\n  lotteryPrizeAmount = 0,\n  pastDraw = false,\n  jackpotMatches,\n  twoTicketMatches,\n  threeTicketMatches,\n}) => {\n  const distribution = useAllocation()\n  const fourMatchesAmount = +((lotteryPrizeAmount / 100) * distribution[0]).toFixed(0)\n  const threeMatchesAmount = +((lotteryPrizeAmount / 100) * distribution[1]).toFixed(0)\n  const twoMatchesAmount = +((lotteryPrizeAmount / 100) * distribution[2]).toFixed(0)\n  const burnAmount = +((lotteryPrizeAmount / 100) * (100 - distribution[0] - distribution[1] - distribution[2])).toFixed(0)\n  const TranslateString = useI18n()\n\n  return (\n    <Grid pastDraw={pastDraw}>\n      <GridItem>\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {TranslateString(999, 'No. Matched')}\n        </Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText fontSize=\"14px\" color=\"textSubtle\">\n            {TranslateString(999, 'Winners')}\n          </RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText fontSize=\"14px\" color=\"textSubtle\">\n          {TranslateString(999, 'Prize Pot')}\n        </RightAlignedText>\n      </GridItem>\n      {/* 4 matches row */}\n      <GridItem>\n        <Heading size=\"md\">4</Heading>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedHeading size=\"md\">{jackpotMatches}</RightAlignedHeading>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedHeading size=\"md\">{fourMatchesAmount.toLocaleString()}</RightAlignedHeading>\n      </GridItem>\n      {/* 3 matches row */}\n      <GridItem>\n        <Text bold>3</Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText bold>{threeTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>{threeMatchesAmount.toLocaleString()}</RightAlignedText>\n      </GridItem>\n      {/* 2 matches row */}\n      <GridItem marginBottom=\"20px\">\n        <Text>2</Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem marginBottom=\"20px\">\n          <RightAlignedText>{twoTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem marginBottom=\"20px\">\n        <RightAlignedText>{twoMatchesAmount.toLocaleString()}</RightAlignedText>\n      </GridItem>\n      {/* Burn row */}\n      <GridItem marginBottom=\"0\">\n        <Text>{TranslateString(999, `${pastDraw ? 'Burned' : 'To burn'}`)}:</Text>\n      </GridItem>\n      {pastDraw ? (\n        <>\n          <GridItem marginBottom=\"0\" />\n          <GridItem marginBottom=\"0\">\n            <RightAlignedText>{burnAmount.toLocaleString()}</RightAlignedText>\n          </GridItem>\n        </>\n      ) : (\n        <GridItem marginBottom=\"0\">\n          <RightAlignedText>{burnAmount.toLocaleString()}</RightAlignedText>\n        </GridItem>\n      )}\n    </Grid>\n  )\n}\n\nexport default PrizeGrid","import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Heading, Card, CardBody, CardFooter, Text, PancakeRoundIcon, Flex, Skeleton } from 'MOONKAT_uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useTotalRewards, useTotalRewardsForMkat } from 'hooks/useTickets'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton/ExpandableSectionButton'\nimport tokenInfo from 'config/constants/tokenInfo'\nimport PrizeGrid from '../PrizeGrid'\n\nconst CardHeading = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n`\n\nconst Right = styled.div`\n  display: flex;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: none;\n  }\n`\n\nconst Left = styled.div`\n  display: flex;\n`\n\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst PrizeCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst ExpandingWrapper = styled.div<{ showFooter: boolean }>`\n  height: ${(props) => (props.showFooter ? '100%' : '0px')};\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 100%;\n  }\n`\n\nconst TotalPrizesCard = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const [showFooter, setShowFooter] = useState(false)\n  const lotteryPrizeAmount = +getBalanceNumber(useTotalRewardsForMkat(), tokenInfo[0].decimals).toFixed(0)\n  const lotteryPrizeWithCommaSeparators = lotteryPrizeAmount.toLocaleString()\n  const { currentLotteryNumber } = useContext(PastLotteryDataContext)\n\n  return (\n    <Card>\n      <CardBody>\n        {account && (\n          <Flex mb=\"16px\" alignItems=\"center\" justifyContent=\"space-between\" style={{ height: '20px' }}>\n            {currentLotteryNumber === 0 && <Skeleton height={20} width={56} />}\n            {currentLotteryNumber > 0 && (\n              <>\n                <Text fontSize=\"12px\" style={{ fontWeight: 600 }}>{`Round #${currentLotteryNumber}`}</Text>\n              </>\n            )}\n          </Flex>\n        )}\n        <CardHeading>\n          <Left>\n            <IconWrapper>\n              <PancakeRoundIcon />\n            </IconWrapper>\n            <PrizeCountWrapper>\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {TranslateString(999, 'Total Pot:')}\n              </Text>\n              <Heading size=\"lg\">{lotteryPrizeWithCommaSeparators} MKAT</Heading>\n            </PrizeCountWrapper>\n          </Left>\n          <Right>\n            <ExpandableSectionButton onClick={() => setShowFooter(!showFooter)} expanded={showFooter} />\n          </Right>\n        </CardHeading>\n      </CardBody>\n      <ExpandingWrapper showFooter={showFooter}>\n        <CardFooter>\n          <PrizeGrid lotteryPrizeAmount={lotteryPrizeAmount} />\n        </CardFooter>\n      </ExpandingWrapper>\n    </Card>\n  )\n}\n\nexport default TotalPrizesCard","import React from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Image, Card, CardBody } from 'MOONKAT_uikit'\nimport { useWinningNumbersForMkat, useMatchingRewardLengthForMkat } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\nimport { useGetLotteryHasDrawnForMkat } from 'hooks/useGetLotteryHasDrawn'\n\nconst WinningNumbers: React.FC = () => {\n  const { account } = useWallet()\n  const winNumbers = useWinningNumbersForMkat()\n  const lotteryHasDrawn = useGetLotteryHasDrawnForMkat()\n  const MatchedNumber4 = useMatchingRewardLengthForMkat(4)\n  const MatchedNumber3 = useMatchingRewardLengthForMkat(3)\n  const MatchedNumber2 = useMatchingRewardLengthForMkat(2)\n  const TranslateString = useI18n()\n\n  return (\n    <CardWrapper>\n      <Card>\n        <CardBody>\n          <StyledCardContentInner>\n            <StyledCardHeader>\n              <Title>\n                {account && lotteryHasDrawn\n                  ? `🥳${TranslateString(570, 'Winning Numbers This Round')}🥳`\n                  : TranslateString(572, 'Latest Winning Numbers')}\n              </Title>\n              <br />\n            </StyledCardHeader>\n            <Row>\n              {winNumbers.map((number, index) => (\n                // eslint-disable-next-line react/no-array-index-key\n                <TicketNumberBox key={index}>\n                  <CenteredText>{number}</CenteredText>\n                </TicketNumberBox>\n              ))}\n            </Row>\n            <Column>\n              <RowNoPadding>\n                <CenteredTextWithPadding>{TranslateString(442, 'Tickets matching 4 numbers:')}</CenteredTextWithPadding>\n                <CenteredTextWithPadding>\n                  <strong>{MatchedNumber4}</strong>\n                </CenteredTextWithPadding>\n              </RowNoPadding>\n              <RowNoPadding>\n                <CenteredTextWithPadding>{TranslateString(444, 'Tickets matching 3 numbers:')}</CenteredTextWithPadding>\n                <CenteredTextWithPadding>\n                  <strong>{MatchedNumber3}</strong>\n                </CenteredTextWithPadding>\n              </RowNoPadding>\n              <RowNoPadding>\n                <CenteredTextWithPadding>{TranslateString(446, 'Tickets matching 2 numbers:')}</CenteredTextWithPadding>\n                <CenteredTextWithPadding>\n                  <strong>{MatchedNumber2}</strong>\n                </CenteredTextWithPadding>\n              </RowNoPadding>\n            </Column>\n            {/* <Link href=\"https://api.pancakeswap.com/api/lottery?page=0&pageSize=25\" target=\"_blank\">\n              {TranslateString(448, 'Export recent winning numbers')}\n            </Link> */}\n          </StyledCardContentInner>\n        </CardBody>\n      </Card>\n    </CardWrapper>\n  )\n}\nconst Link = styled.a`\n  margin-top: 1em;\n  text-decoration: none;\n  color: #25beca;\n`\n\nconst Row = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n`\n\nconst RabbitRow = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`\n\nconst RabbitRowSmall = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  @media (min-width: 768px) {\n    display: none;\n  }\n`\n\nconst CardImage = styled.div`\n  text-align: center;\n`\n\nconst CardImageFirst = styled.div`\n  text-align: center;\n  margin-left: -1.2em;\n  @media (max-width: 600) {\n    margin-left: -0.2em;\n  }\n`\n\nconst RowNoPadding = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n`\n\nconst Column = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CenteredText = styled.div`\n  text-align: center;\n  align-items: center;\n`\n\nconst CenteredTextWithPadding = styled.div`\n  text-align: center;\n  align-items: center;\n  padding-left: 2px;\n  padding-right: 2px;\n`\n\nconst TicketNumberBox = styled.div`\n  padding: 10px;\n  border: 2px dotted #24c7d6;\n  border-radius: 12px;\n  background: #ffffff;\n  color: #24c7d6;\n  font-size: 20px;\n  font-weight: 900;\n  margin: 10px;\n  margin-bottom: 7px;\n  width: 40px;\n  @media (min-width: 768px) {\n    font-size: 40px;\n    margin: 20px;\n    width: 66px;\n  }\n`\n\nconst RabbitBox = styled.div`\n  /* padding: 10px; */\n  border-radius: 12px;\n  margin: 16px 20px;\n  width: 60px;\n`\n\nconst RabbitBoxSmall = styled.div`\n  padding-top: 10px;\n  padding-left: 10px;\n  border-radius: 12px;\n  margin: 20px;\n  width: 20px;\n`\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CardWrapper = styled.div``\n\nconst Title = styled.div`\n  color: ${(props) => props.theme.colors.secondary};\n  font-size: 24px;\n  width: 50vw;\n  text-align: center;\n  font-weight: 1000;\n`\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nexport default WinningNumbers","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Heading, Link, Image } from 'MOONKAT_uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst LayoutWrapper = styled.div`\n  max-width: 500px;\n  margin: 0 auto 40px;\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledHeading = styled(Heading)`\n  margin: 16px 0;\n`\n\nconst StyledImage = styled(Image)`\n  align-self: center;\n`\n\nconst StyledLink = styled(Link)`\n  align-self: center;\n  margin-top: 16px;\n`\n\nconst HowItWorks = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <LayoutWrapper>\n      <StyledImage src=\"/images/lottery-machine.png\" alt=\"lottery bunny\" width={163} height={140} />\n      <StyledHeading size=\"lg\" as=\"h3\" color=\"secondary\">\n        {TranslateString(999, 'How it works')}\n      </StyledHeading>\n      <Text fontSize=\"16px\">\n        {TranslateString(\n          999,\n          'Spend MKAT to buy tickets, contributing to the lottery pot. Win prizes if 2, 3, or 4 of your ticket numbers match the winning numbers and their exact order!',\n        )}\n      </Text>\n      {/* <StyledLink href=\"https://docs.pancakeswap.finance/lottery-1\">Read more</StyledLink> */}\n    </LayoutWrapper>\n  )\n}\n\nexport default HowItWorks","import React from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { BaseLayout } from 'MOONKAT_uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalClaimForMkat } from 'hooks/useTickets'\nimport YourPrizesCard from './components/YourPrizesCard'\nimport UnlockWalletCard from './components/UnlockWalletCard'\nimport TicketCard from './components/TicketCard'\nimport TotalPrizesCard from './components/TotalPrizesCard'\nimport WinningNumbers from './components/WinningNumbers'\nimport HowItWorks from './components/HowItWorks'\nimport tokenInfo from '../../config/constants/tokenInfo'\n\nconst Cards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n  & > div {\n    grid-column: span 6;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 12;\n    }\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst SecondCardColumnWrapper = styled.div<{ isAWin?: boolean }>`\n  display: flex;\n  flex-direction: ${(props) => (props.isAWin ? 'column' : 'column-reverse')};\n`\n\nconst NextDrawPage: React.FC = () => {\n  const { account } = useWallet()\n  const { claimAmount } = useTotalClaimForMkat()\n  const winnings = getBalanceNumber(claimAmount, tokenInfo[0].decimals)\n  const isAWin = winnings > 0\n\n  return (\n    <>\n      <Cards>\n        <div>\n          <TotalPrizesCard />\n        </div>\n        <SecondCardColumnWrapper isAWin={isAWin}>\n          {!account ? (\n            <UnlockWalletCard />\n          ) : (\n            <>\n              <YourPrizesCard />\n              <TicketCard isSecondCard={isAWin} />\n            </>\n          )}\n        </SecondCardColumnWrapper>\n      </Cards>\n      <HowItWorks />\n      {/* legacy page content */}\n      <WinningNumbers />\n    </>\n  )\n}\n\nexport default NextDrawPage","import React from 'react'\nimport styled from 'styled-components'\nimport { BaseLayout, Heading } from 'MOONKAT_uikit'\nimport PastLotteryRoundViewer from './components/PastLotteryRoundViewer'\nimport PastDrawsHistoryCard from './components/PastDrawsHistory/PastDrawsHistoryCard'\n\nconst Cards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n  & > div {\n    grid-column: span 6;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 12;\n    }\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst SecondCardColumnWrapper = styled.div<{ isAWin?: boolean }>`\n  display: flex;\n  flex-direction: column;\n`\n\nconst BunnyImageWrapper = styled.div`\n  display: flex;\n  margin-top: 32px;\n  justify-content: center;\n`\n\nconst CommingSoon = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 164px);\n  justify-content: center;\n`\n\nconst PastDrawsPage: React.FC = () => {\n  return (\n    <CommingSoon>\n      <Heading size=\"xl\">Comming Soon!</Heading>\n    </CommingSoon>\n    // <Cards>\n    //   <PastLotteryRoundViewer />\n    //   <SecondCardColumnWrapper>\n    //     <PastDrawsHistoryCard />\n    //     <BunnyImageWrapper>\n    //       <img src=\"/images/pancake-lottery-bunny.png\" alt=\"lottery bunny\" />\n    //     </BunnyImageWrapper>\n    //   </SecondCardColumnWrapper>\n    // </Cards>\n  )\n}\n\nexport default PastDrawsPage","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem } from 'MOONKAT_uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport useI18n from 'hooks/useI18n'\nimport { useLotteryForMkat } from 'hooks/useContract'\nimport Page from 'components/layout/Page'\nimport Hero from './components/Hero'\nimport Divider from './components/Divider'\nimport NextDrawPage from './NextDrawPage'\nimport PastDrawsPage from './PastDrawsPage'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 32px;\n`\n\nconst Lottery: React.FC = () => {\n  const lotteryContract = useLotteryForMkat()\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const [activeIndex, setActiveIndex] = useState(0)\n  const [historyData, setHistoryData] = useState([])\n  const [historyError, setHistoryError] = useState(false)\n  const [currentLotteryNumber, setCurrentLotteryNumber] = useState(0)\n  const [mostRecentLotteryNumber, setMostRecentLotteryNumber] = useState(1)\n\n  useEffect(() => {\n    fetch(`https://api.pancakeswap.com/api/lotteryHistory`)\n      .then((response) => response.json())\n      .then((data) => setHistoryData(data))\n      .catch(() => {\n        setHistoryError(true)\n      })\n  }, [])\n\n  useEffect(() => {\n    const getInitialLotteryIndex = async () => {\n      const index = await getLotteryIssueIndex(lotteryContract)\n      const previousLotteryNumber = index - 1\n\n      setCurrentLotteryNumber(index)\n      setMostRecentLotteryNumber(previousLotteryNumber)\n    }\n\n    if (account && lotteryContract) {\n      getInitialLotteryIndex()\n    }\n  }, [account, lotteryContract])\n\n  const handleClick = (index) => {\n    setActiveIndex(index)\n  }\n\n  return (\n    <>\n      <Hero />\n      <Page>\n        <Wrapper>\n          {/* <ButtonMenu activeIndex={activeIndex} onClick={handleClick} size=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>{TranslateString(999, 'Next draw')}</ButtonMenuItem>\n            <ButtonMenuItem>{TranslateString(999, 'Past draws')}</ButtonMenuItem>\n          </ButtonMenu> */}\n        </Wrapper>\n        <Divider />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          {activeIndex === 0 ? <NextDrawPage /> : <PastDrawsPage />}\n        </PastLotteryDataContext.Provider>\n      </Page>\n    </>\n  )\n}\n\nexport default Lottery\n"],"sourceRoot":""}