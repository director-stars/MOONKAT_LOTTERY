{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","state/actions.ts","contexts/Localisation/translationsContext.ts","components/layout/Page.tsx","config/constants/types.ts","utils/addressHelpers.ts","config/constants/contracts.ts","components/layout/Container.tsx","utils/multicall.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","state/hooks.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenSymbol","QuoteToken","BNB","getBNBRewardChefAddress","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","bnbRewardChefABI","masterchefABI","pid","info","totalAllocPoint","mkatsPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","bnbRewardChefAddress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","abi","call","rawStakedBalance","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarning","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","useRefresh","useContext","fastRefresh","slowRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Page","styled","Container","theme","mediaQueries","sm","lg","PoolCategory","getCakeAddress","addresses","cake","chainId","getCakeAddressForMkat","mkat","masterChef","bnbRewardChef","getMulticallAddress","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryAddressForMkat","lotteryForMkat","getLotteryTicketAddress","lotteryNFT","getLotteryTicketAddressForMkat","lotteryNFTForMkat","56","97","mkats","busd","web3","getWeb3","multi","eth","Contract","MultiCallAbi","itf","Interface","calldata","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","i","decodeFunctionResult","pools","sousId","tokenName","stakingTokenName","MKATMKATSLP","stakingTokenAddress","contractAddress","poolCategory","CORE","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","nonBnbPools","poolsConfig","filter","p","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingMkats","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","risk","lpSymbol","contracts","MKAT","UST","MKATS","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","ZERO","useFarmFromPid","useSelector","usePriceCakeBusd","config","label","icon","href","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","MkatLottery","lazy","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"kUAiIeA,EAtHC,uCAAG,4BAAAC,EAAA,sEACEC,QAAQC,IACzBC,IAAYC,IAAZ,uCAAgB,WAAOC,GAAP,yDAAAL,EAAA,6DACRM,EAAWD,EAAWE,YAAYC,IAClCC,EAAQ,CAEZ,CACEC,QAASL,EAAWM,eAAeH,IACnCI,KAAM,YACNC,OAAQ,CAACP,IAGX,CACEI,QAASL,EAAWS,mBAAmBN,IACvCI,KAAM,YACNC,OAAQ,CAACP,IAGX,CACEI,QAASL,EAAWU,YAAcV,EAAWM,eAAeH,IAAYF,EACxEM,KAAM,YACNC,OAASR,EAAWW,cAAgBC,IAAWC,IAAO,CAACC,eAA6B,CAACC,gBAGvF,CACEV,QAASJ,EACTM,KAAM,eAGR,CACEF,QAASL,EAAWM,eAAeH,IACnCI,KAAM,YAGR,CACEF,QAASL,EAAWS,mBAAmBN,IACvCI,KAAM,aAlCI,SA6CJS,YAAUC,EAAOb,GA7Cb,0CAuCZc,EAvCY,KAwCZC,EAxCY,KAyCZC,EAzCY,KA0CZC,EA1CY,KA2CZC,EA3CY,KA4CZC,EA5CY,KAkDXvB,EAAWU,aACZc,EAAc,IAAIC,IAAUL,GAAkBM,IAAI,IAAID,IAAU,IAAIE,IAAIL,IAEtEM,EADC5B,EAAWW,cAAgBC,IAAWiB,MAAQ7B,EAAW8B,mBAAqBlB,IAAWiB,KACtE,IAAIJ,IAAU,GAEd,IAAIA,IAAUN,GAAoBO,IAAI,IAAID,IAAU,IAAIE,IAAIJ,IAAqBG,IAAI,IAAID,IAAUP,GAAgBQ,IAAI,IAAID,IAAU,IAAIE,IAAIL,KAEnKS,EAAsBP,EAAYQ,MAAMJ,KAGlCK,EAAe,IAAIR,IAAUL,GAAkBM,IAAI,IAAID,IAAUJ,IAGvEU,EAAsB,IAAIN,IAAUN,GACjCO,IAAI,IAAID,IAAU,IAAIE,IAAI,KAC1BK,MAAM,IAAIP,IAAU,IACpBO,MAAMC,GAGTT,EAAc,IAAIC,IAAUP,GAAgBQ,IAAI,IAAID,IAAU,IAAIE,IAAIL,IAAgBU,MAAMC,GACtFC,EAAmB,IAAIT,IAAUN,GACpCO,IAAI,IAAID,IAAU,IAAIE,IAAIJ,IAC1BS,MAAMC,GAGPL,EADCJ,EAAYW,WAAW,GAAK,EACTD,EAAiBR,IAAIF,GAErB,IAAIC,IAAUN,GAAoBO,IAAI,IAAID,IAAUP,KA7E9D,UAiFuCF,YAAWhB,EAAWW,cAAgBC,IAAWC,IAAOuB,EAAmBC,EAAe,CAC7I,CACEhC,QAAUL,EAAWW,cAAgBC,IAAWC,IAAOC,cAA4BC,cACnFR,KAAM,WACNC,OAASR,EAAWW,cAAgBC,IAAWC,IAAO,CAAC,GAAK,CAACb,EAAWsC,MAE1E,CACEjC,QAAUL,EAAWW,cAAgBC,IAAWC,IAAOC,cAA4BC,cACnFR,KAAOP,EAAWW,cAAgBC,IAAWC,IAAO,iBAAmB,mBAEzE,CACER,QAAUL,EAAWW,cAAgBC,IAAWC,IAAOC,cAA4BC,cACnFR,KAAOP,EAAWW,cAAgBC,IAAWC,IAAO,iBAAmB,mBA7F7D,2CAiFP0B,EAjFO,KAiFDC,EAjFC,KAiFgBC,EAjFhB,KAiGRC,EAAa,IAAIjB,IAAUc,EAAKG,WAAWC,MAC3CC,EAAgC,MAAnB5C,EAAWsC,IAAcI,EAAWhB,IAAIgB,GAAcA,EAAWhB,IAAI,IAAID,IAAUe,IAlGxF,6CAqGTxC,GArGS,IAsGZwB,YAAaA,EAAYqB,SAEzBd,oBAAqBA,EAAoBc,SACzCjB,kBAAmBA,EAAkBiB,SACrCD,WAAYA,EAAWE,WACvBC,WAAW,GAAD,OAAKL,EAAWhB,IAAI,KAAKsB,WAAzB,KACVC,aAAcV,EAAKU,aACnBR,cAAe,IAAIhB,IAAUgB,GAAeK,cA7GhC,4CAAhB,wDAFe,cACXI,EADW,yBAmHVA,GAnHU,2CAAH,qDCAHC,EAAuB,uCAAG,WAAOC,GAAP,uBAAAzD,EAAA,6DAC/B0D,EAAmBtC,cACnBuC,EAAuBxC,cAEvBV,EAAQN,IAAYC,KAAI,SAACwD,GAE7B,MAAO,CAAElD,QADiBkD,EAAK7C,YAAc6C,EAAKjD,eAAeH,IAAYoD,EAAKrD,YAAYC,IACzDI,KAAM,YAAaC,OAAQ,CAAC4C,EAAsB,MAAbG,EAAKjB,IAAcgB,EAAuBD,OANjF,SASPrC,YAAUwC,EAAUpD,GATb,cAS/BqD,EAT+B,OAU/BC,EAAqBD,EAAgB1D,KAAI,SAAC4D,GAC9C,OAAO,IAAIlC,IAAUkC,GAAWd,YAXG,kBAa9Ba,GAb8B,2CAAH,sDAgBvBE,EAA0B,uCAAG,WAAOR,GAAP,mBAAAzD,EAAA,6DAClCS,EAAQN,IAAYC,KAAI,SAACwD,GAE7B,MAAO,CACLlD,QAFwBkD,EAAK7C,YAAc6C,EAAKjD,eAAeH,IAAYoD,EAAKrD,YAAYC,IAG5FI,KAAM,YACNC,OAAQ,CAAC4C,OAN2B,SAUTpC,YAAUwC,EAAUpD,GAVX,cAUlCyD,EAVkC,OAWlCC,EAAsBD,EAAiB9D,KAAI,SAACgE,GAChD,OAAO,IAAItC,IAAUsC,GAAclB,YAZG,kBAcjCiB,GAdiC,2CAAH,sDAiB1BE,EAA2B,uCAAG,WAAOZ,GAAP,qBAAAzD,EAAA,6DACnC0D,EAAmBtC,cACnBuC,EAAuBxC,cAFY,SAITlB,QAAQC,IACtCC,IAAYC,IAAZ,uCAAgB,WAAOwD,GAAP,mBAAA5D,EAAA,6DAGG,MAAb4D,EAAKjB,KACP2B,EAAM7B,EACN8B,EAAO,CACL7D,QAASiD,EACT/C,KAAM,WACNC,OAAQ,CAAC4C,MAGXa,EAAM5B,EACN6B,EAAO,CACL7D,QAASgD,EACT9C,KAAM,WACNC,OAAQ,CAAC+C,EAAKjB,IAAKc,KAfT,SAkBkBpC,YAAUiD,EAAK,CAACC,IAlBlC,cAkBRC,EAlBQ,OAkB0C,GAlB1C,kBAmBPA,GAnBO,2CAAhB,wDALuC,cAInCC,EAJmC,OA6BnCC,EAAuBD,EAAkBrE,KAAI,SAACuE,GAClD,OAAO,IAAI7C,IAAU6C,EAAc,GAAG3B,MAAME,YA9BL,kBAgClCwB,GAhCkC,2CAAH,sDAmC3BE,EAAqB,uCAAG,WAAOnB,GAAP,qBAAAzD,EAAA,6DAC7B0D,EAAmBtC,cACnBuC,EAAuBxC,cAFM,SAITlB,QAAQC,IAChCC,IAAYC,IAAZ,uCAAgB,WAAOwD,GAAP,mBAAA5D,EAAA,6DAGV4D,EAAK5C,cAAgBC,IAAWC,KAClCoD,EAAM7B,EACN8B,EAAO,CACL7D,QAASiD,EACT/C,KAAM,gBACNC,OAAQ,CAAC4C,MAGXa,EAAM5B,EACN6B,EAAO,CACL7D,QAASgD,EACT9C,KAAM,eACNC,OAAQ,CAAC+C,EAAKjB,IAAKc,KAfT,SAkBYpC,YAAUiD,EAAK,CAACC,IAlB5B,cAkBRM,EAlBQ,OAkBoC,GAlBpC,kBAoBPA,GApBO,2CAAhB,wDALiC,cAI7BC,EAJ6B,OA8B7BC,EAAiBD,EAAY1E,KAAI,SAAC4E,GACtC,OAAO,IAAIlD,IAAUkD,GAAU9B,YA/BE,kBAiC5B6B,GAjC4B,2CAAH,sDCnE5BE,EAA2B,CAAE1B,KAAK,YAAKpD,MAEhC+E,EAAaC,YAAY,CACpCvE,KAAM,QACNqE,eACAG,SAAU,CACRC,mBAAoB,SAACC,EAAOC,GAC1B,IAAMC,EAAwBD,EAAOE,QACrCH,EAAM/B,KAAO+B,EAAM/B,KAAKnD,KAAI,SAACwD,GAC3B,IAAM8B,EAAeF,EAAcG,MAAK,SAACC,GAAD,OAAOA,EAAEjD,MAAQiB,EAAKjB,OAC9D,OAAO,2BAAKiB,GAAS8B,OAGzBG,gBAAiB,SAACP,EAAOC,GACYA,EAAOE,QAAlCK,uBACeC,SAAQ,SAACC,GAAgB,IACtCC,EAAUD,EAAVC,MACRX,EAAM/B,KAAK0C,GAAX,2BAAyBX,EAAM/B,KAAK0C,IAApC,IAA4CC,SAAUF,W,EAOPd,EAAWiB,QAAnDd,E,EAAAA,mBAAoBQ,E,EAAAA,gBAGtBO,EAA4B,yDAAM,WAAOC,GAAP,eAAArG,EAAA,sEACzBD,IADyB,OACvCuG,EADuC,OAE7CD,EAAShB,EAAmBiB,IAFiB,2CAAN,uDAI5BC,EAAyB,SAAC9C,GAAD,8CAAa,WAAO4C,GAAP,uBAAArG,EAAA,sEAChBwD,EAAwBC,GADR,cAC3C+C,EAD2C,gBAEbvC,EAA2BR,GAFd,cAE3CgD,EAF2C,gBAGhBpC,EAA4BZ,GAHZ,cAG3CiD,EAH2C,iBAIlB9B,EAAsBnB,GAJJ,QAI3CkD,EAJ2C,OAM3Cb,EAAyBU,EAAmBpG,KAAI,SAACwG,EAAeX,GACpE,MAAO,CACLA,QACAY,UAAWL,EAAmBP,GAC9B7B,aAAcqC,EAAsBR,GACpCtB,cAAe+B,EAAmBT,GAClCjB,SAAU2B,EAAiBV,OAI/BI,EAASR,EAAgB,CAAEC,4BAhBsB,4CAAb,uDAmBvBZ,MAAf,S,g1RC9DA,sBAGM4B,EAAQ,CAACC,kDAA8BA,kDAA8BA,mDAO5DC,IALI,WACjB,IAAMC,EAAcC,IAAO,EAAGJ,EAAMK,OAAS,GAC7C,OAAOL,EAAMG,K,wJCFTG,E,OAAiBC,EAAMC,cAAc,CAAEC,KAAM,EAAGC,KAAM,IAGtDC,EAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACvBC,mBAAS,GADc,mBACxCJ,EADwC,KAClCK,EADkC,OAEvBD,mBAAS,GAFc,mBAExCH,EAFwC,KAElCK,EAFkC,KAkB/C,OAdAC,qBAAU,WACR,IAAMC,EAAWC,YAAW,sBAAC,sBAAAhI,EAAA,sDAC3B6H,GAAQ,SAACI,GAAD,OAAUA,EAAO,KADE,2CAXX,KAclB,OAAO,kBAAMC,cAAcH,MAC1B,IAEHD,qBAAU,WACR,IAAMC,EAAWC,YAAW,sBAAC,sBAAAhI,EAAA,sDAC3B4H,GAAQ,SAACK,GAAD,OAAUA,EAAO,KADE,2CAjBX,KAoBlB,OAAO,kBAAMC,cAAcH,MAC1B,IAEI,cAACX,EAAee,SAAhB,CAAyBC,MAAO,CAAEb,OAAMC,QAAxC,SAAiDE,M,iCC1B1D,oBAQeW,IALI,WAAO,IAAD,EACAC,qBAAWlB,KAClC,MAAO,CAAEmB,YAFc,EACff,KACoBgB,YAFL,EACTjB,Q,iCCJhB,0K,iCCAA,6CAOMkB,EAA4C,CAChDC,aAAc,GACdC,gBAAiB,cAGNC,EAAsBtB,wBAAcmB,I,4VCTjD,IAAMI,EAAOC,YAAOC,IAAPD,CAAH,KAKN,qBAAGE,MAAkBC,aAAaC,MAKlC,qBAAGF,MAAkBC,aAAaE,MAMvBN,O,gCCER,IAAK5H,EAYAmI,EAZZ,oE,SAAYnI,K,UAAAA,E,YAAAA,E,cAAAA,E,YAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,cAAAA,E,6BAAAA,M,cAYAmI,K,sBAAAA,E,YAAAA,E,mBAAAA,M,sCCjCZ,gWAIaC,EAAiB,WAC5B,OAAOC,IAAUC,KAAKC,KAEXC,EAAwB,WACnC,OAAOH,IAAUI,KAAKF,KAEXpI,EAAuB,WAClC,OAAOkI,IAAUK,WAAWH,KAEjBrI,EAA0B,WACrC,OAAOmI,IAAUM,cAAcJ,KAEpBK,EAAsB,WACjC,OAAOP,IAAUQ,WAAWN,KAEjBO,EAAiB,WAC5B,OAAOT,IAAUU,KAAKR,KAEXS,EAAoB,WAC/B,OAAOX,IAAUY,QAAQV,KAEdW,EAA2B,WACtC,OAAOb,IAAUc,eAAeZ,KAErBa,EAA0B,WACrC,OAAOf,IAAUgB,WAAWd,KAEjBe,EAAiC,WAC5C,OAAOjB,IAAUkB,kBAAkBhB,M,gCChCtB,KACbD,KAAM,CAGJkB,GAAI,6CACJC,GAAI,8CAENf,WAAY,CAGVc,GAAI,6CACJC,GAAI,IAENd,cAAe,CACba,GAAI,6CACJC,GAAI,IAENV,KAAM,CACJS,GAAI,6CACJC,GAAI,IAENhB,KAAM,CACJe,GAAI,6CACJC,GAAI,8CAENC,MAAO,CACLF,GAAI,6CACJC,GAAI,8CAENR,QAAS,CACPO,GAAI,6CACJC,GAAI,8CAENN,eAAgB,CACdK,GAAI,6CACJC,GAAI,8CAENJ,WAAY,CACVG,GAAI,6CACJC,GAAI,8CAENF,kBAAmB,CACjBC,GAAI,6CACJC,GAAI,8CAENZ,WAAY,CACVW,GAAI,6CACJC,GAAI,8CAENE,KAAM,CACJH,GAAI,6CACJC,GAAI,M,0yPCjDR,IAAM3B,E,KAAYD,EAAO/G,IAAV,KAOX,qBAAGiH,MAAkBC,aAAaC,MAMvBH,O,2yFCHT1H,EAAS,uCAAG,WAAOiD,EAAY7D,GAAnB,2BAAAT,EAAA,6DACV6K,EAAOC,cACPC,EAAQ,IAAIF,EAAKG,IAAIC,SAAUC,EAAqCrB,eACpEsB,EAAM,IAAIC,IAAU9G,GAEpB+G,EAAW5K,EAAML,KAAI,SAACmE,GAAD,MAAU,CAACA,EAAK7D,QAAQ4K,cAAeH,EAAII,mBAAmBhH,EAAK3D,KAAM2D,EAAK1D,YALzF,SAMakK,EAAMS,QAAQC,UAAUJ,GAAU9G,OAN/C,uBAMRmH,EANQ,EAMRA,WACFC,EAAMD,EAAWtL,KAAI,SAACmE,EAAMqH,GAAP,OAAaT,EAAIU,qBAAqBpL,EAAMmL,GAAGhL,KAAM2D,MAPhE,kBASToH,GATS,4CAAH,wDAYAtK,O,4FCxBf,YAEMyK,EAAsB,CAC1B,CACEC,OAAQ,EACRC,UAAW,MACXC,iBAAkBhL,IAAWiL,YAC7BC,oBAAqB,6CACrBC,gBAAiB,CACf1B,GAAI,6CACJD,GAAI,8CAEN4B,aAAcjD,IAAakD,KAC3BC,YAAa,+BACbC,SAAS,EACTC,cAAe,KACfC,UAAW,EACXC,YAAY,EACZhL,cAAe,KAsCJmK,O,6YCzCTc,EAAcC,IAAYC,QAAO,SAACC,GAAD,OAAOA,EAAEd,mBAAqBhL,IAAWC,OAC1E8L,EAAWH,IAAYC,QAAO,SAACC,GAAD,OAAOA,EAAEd,mBAAqBhL,IAAWC,OACvE+L,EAAiBJ,IAAYC,QAAO,SAACC,GAAD,OAAoB,IAAbA,EAAEhB,UAC7ClB,EAAOC,cACPoC,EAAqB,IAAIrC,EAAKG,IAAIC,SAAUkC,EAAsC/L,eAE3EgM,EAAmB,uCAAG,WAAO3J,GAAP,iBAAAzD,EAAA,6DAC3BS,EAAQmM,EAAYxM,KAAI,SAAC2M,GAAD,MAAQ,CACpCrM,QAASqM,EAAEZ,oBACXvL,KAAM,YACNC,OAAQ,CAAC4C,EAASsJ,EAAEX,gBAAgB5L,SAJL,SAORa,YAAUwC,EAAUpD,GAPZ,cAO3B4M,EAP2B,yBAQ1BT,EAAYU,QACjB,SAACC,EAAKC,EAAMvH,GAAZ,mBAAC,eAA2BsH,GAA5B,kBAAkCC,EAAKzB,OAAS,IAAIjK,IAAUuL,EAAWpH,IAAQ/C,aACjF,KAV+B,2CAAH,sDAcnBuK,EAAiB,uCAAG,WAAOhK,GAAP,uBAAAzD,EAAA,6DAEzBS,EAAQmM,EAAYxM,KAAI,SAAC2M,GAAD,MAAQ,CACpCrM,QAASqM,EAAEZ,oBACXvL,KAAM,YACNC,OAAQ,CAAC4C,OALoB,SAOApC,YAAUwC,EAAUpD,GAPpB,cAOzBiN,EAPyB,OAQzBC,EAAgBf,EAAYU,QAChC,SAACC,EAAKC,EAAMvH,GAAZ,mBAAC,eAA2BsH,GAA5B,kBAAkCC,EAAKzB,OAAS,IAAIjK,IAAU4L,EAAiBzH,IAAQ/C,aACvF,IAV6B,SAcN2H,EAAKG,IAAI4C,WAAWnK,GAdd,cAczBoK,EAdyB,OAezBC,EAAcd,EAASM,QAC3B,SAACC,EAAKC,GAAN,mBAAC,eAAoBD,GAArB,kBAA2BC,EAAKzB,OAAS,IAAIjK,IAAU+L,GAAY3K,aACnE,IAjB6B,6CAoBnByK,GAAkBG,IApBC,4CAAH,sDAuBjBC,EAAsB,uCAAG,WAAOtK,GAAP,uBAAAzD,EAAA,6DAC9BS,EAAQwM,EAAe7M,KAAI,SAAC2M,GAAD,MAAQ,CACvCrM,QAASqM,EAAEX,gBAAgB5L,IAC3BI,KAAM,WACNC,OAAQ,CAAC4C,OAJyB,SAMbpC,YAAU2M,EAAavN,GANV,cAM9BwN,EAN8B,OAO9BC,EAAiBjB,EAAeK,QACpC,SAACC,EAAKC,EAAMvH,GAAZ,mBAAC,eACIsH,GADL,kBAEGC,EAAKzB,OAAS,IAAIjK,IAAUmM,EAAShI,GAAOkI,OAAOnL,MAAME,aAE5D,IAZkC,SAgBOgK,EAAmB1B,QAAQyC,SAAS,IAAKxK,GAASc,OAhBzD,uBAgBpB6J,EAhBoB,EAgB5BD,OAhB4B,6CAkBxBD,GAlBwB,IAkBRG,EAAG,IAAIvM,IAAUsM,GAAkBlL,YAlB3B,4CAAH,sDAqBtBoL,EAAuB,uCAAG,WAAO7K,GAAP,qBAAAzD,EAAA,6DAC/BS,EAAQwM,EAAe7M,KAAI,SAAC2M,GAAD,MAAQ,CACvCrM,QAASqM,EAAEX,gBAAgB5L,IAC3BI,KAAM,gBACNC,OAAQ,CAAC4C,OAJ0B,SAMnBpC,YAAU2M,EAAavN,GANJ,cAM/BkL,EAN+B,OAO/B4C,EAAiBtB,EAAeK,QACpC,SAACC,EAAKC,EAAMvH,GAAZ,mBAAC,eACIsH,GADL,kBAEGC,EAAKzB,OAAS,IAAIjK,IAAU6J,EAAI1F,IAAQ/C,aAE3C,IAZmC,SAgBTgK,EAAmB1B,QAAQgD,aAAa,IAAK/K,GAASc,OAhB7C,cAgB/BkK,EAhB+B,oDAkBzBF,GAlByB,IAkBTF,EAAG,IAAIvM,IAAU2M,GAAevL,YAlBvB,2CAAH,sDCnE9B+B,EAA2B,CAAE1B,KAAK,YAAKsJ,MAEhC6B,EAAavJ,YAAY,CACpCvE,KAAM,QACNqE,eACAG,SAAU,CACRuJ,mBAAoB,SAACrJ,EAAOC,GAC1B,IAAMqJ,EAAwBrJ,EAAOE,QACrCH,EAAM/B,KAAO+B,EAAM/B,KAAKnD,KAAI,SAACoN,GAC3B,IAAMqB,EAAeD,EAAcjJ,MAAK,SAACmJ,GAAD,OAAWA,EAAM/C,SAAWyB,EAAKzB,UACzE,OAAO,2BAAKyB,GAASqB,OAGzBE,iBAAkB,SAACzJ,EAAOC,GACxB,IAAMW,EAAWX,EAAOE,QACxBH,EAAM/B,KAAO+B,EAAM/B,KAAKnD,KAAI,SAACoN,GAC3B,IAAMwB,EAAe9I,EAASP,MAAK,SAACmJ,GAAD,OAAWA,EAAM/C,SAAWyB,EAAKzB,UACpE,OAAO,2BAAKyB,GAAZ,IAAkBtH,SAAU8I,QAGhCC,oBAAqB,SAAC3J,EAAOC,GAAY,IAAD,EACLA,EAAOE,QAAhCyJ,EAD8B,EAC9BA,MAAO9G,EADuB,EACvBA,MAAO2D,EADgB,EAChBA,OAChB9F,EAAQX,EAAM/B,KAAK4L,WAAU,SAACpC,GAAD,OAAOA,EAAEhB,SAAWA,KACvDzG,EAAM/B,KAAK0C,GAAX,2BAAyBX,EAAM/B,KAAK0C,IAApC,IAA4CC,SAAS,2BAAMZ,EAAM/B,KAAK0C,GAAOC,UAAzB,kBAAoCgJ,EAAQ9G,U,EAMzBsG,EAAWvI,QAArD4I,G,EAApBJ,mB,EAAoBI,kBAAkBE,E,EAAAA,oBAmBxCG,EAA0B,SAAC3L,GAAD,8CAAa,WAAO4C,GAAP,uBAAArG,EAAA,sEACzBoN,EAAoB3J,GADK,cAC5C4J,EAD4C,gBAEfI,EAAkBhK,GAFH,cAE5C4L,EAF4C,gBAGrBtB,EAAuBtK,GAHF,cAG5CyK,EAH4C,iBAIrBI,EAAwB7K,GAJH,QAI5C8K,EAJ4C,OAM5CrI,EAAW2G,IAAYzM,KAAI,SAACoN,GAAD,MAAW,CAC1CzB,OAAQyB,EAAKzB,OACblF,UAAWwG,EAAWG,EAAKzB,QAC3BuD,oBAAqBD,EAAqB7B,EAAKzB,QAC/CpH,cAAeuJ,EAAeV,EAAKzB,QACnC0C,cAAeF,EAAef,EAAKzB,YAGrC1F,EAAS0I,EAAiB7I,IAdwB,4CAAb,uDAiB1BqJ,EAAsB,SAACxD,EAAgBtI,GAAjB,8CAAqC,WAAO4C,GAAP,eAAArG,EAAA,sEAC7CoN,EAAoB3J,GADyB,OAChE4J,EADgE,OAEtEhH,EAAS4I,EAAoB,CAAElD,SAAQmD,MAAO,YAAa9G,MAAOiF,EAAWtB,MAFP,2CAArC,uDAoBpB2C,MAAf,S,gCCjGA,oBAGMpI,EAAsB,CAC1B,CACE3D,IAAK,EACL6M,KAAM,EACNC,SAAU,gBACVlP,YAAa,CACXmK,GAAI,GAGJD,GAAI,8CAENzJ,YAAa,QACbL,eAAgB,CACd+J,GAAI,GAGJD,GAAI,8CAENtI,iBAAkBlB,IAAWiB,KAC7BpB,mBAAoB4O,IAAU9E,MAEhC,CACEjI,IAAK,EACL6M,KAAM,EACNC,SAAU,eACVlP,YAAa,CACXmK,GAAI,GAGJD,GAAI,8CAENzJ,YAAa,QACbL,eAAgB,CACd+J,GAAI,GAGJD,GAAI,8CAENtI,iBAAkBlB,IAAWC,IAC7BJ,mBAAoB4O,IAAU1F,MAEhC,CACErH,IAAK,EACL6M,KAAM,EACNC,SAAU,cACVlP,YAAa,CACXmK,GAAI,GACJD,GAAI,8CAENzJ,YAAa,QACbL,eAAgB,CACd+J,GAAI,GACJD,GAAI,8CAENtI,iBAAkBlB,IAAWC,IAC7BJ,mBAAoB4O,IAAU1F,MAEhC,CACErH,IAAK,EACL6M,KAAM,EACNC,SAAU,eACVlP,YAAa,CACXmK,GAAI,GACJD,GAAI,8CAENzJ,YAAa,QACbL,eAAgB,CACd+J,GAAI,GACJD,GAAI,8CAENtI,iBAAkBlB,IAAWiB,KAC7BpB,mBAAoB4O,IAAU9E,MAEhC,CACEjI,IAAK,EACL6M,KAAM,EACNC,SAAU,gBACVlP,YAAa,CACXmK,GAAI,GACJD,GAAI,8CAENzJ,YAAa,QACbL,eAAgB,CACd+J,GAAI,GACJD,GAAI,8CAENtI,iBAAkBlB,IAAW0O,KAC7B7O,mBAAoB4O,IAAUnG,MAkBhC,CACE5G,IAAK,EACL6M,KAAM,EACNC,SAAU,cACVlP,YAAa,CACXmK,GAAI,GACJD,GAAI,8CAENzJ,YAAa,QACbL,eAAgB,CACd+J,GAAI,GACJD,GAAI,8CAENtI,iBAAkBlB,IAAW2O,IAC7B9O,mBAAoB4O,IAAU9E,MAEhC,CACEjI,IAAK,IACL6M,KAAM,EACNC,SAAU,gBACVlP,YAAa,CACXmK,GAAI,GACJD,GAAI,8CAENzJ,YAAa,MACbL,eAAgB,CACd+J,GAAI,GACJD,GAAI,8CAENtI,iBAAkBlB,IAAW0O,KAC7B7O,mBAAoB4O,IAAUnG,MAkGhC,CACE5G,IAAK,EACL6M,KAAM,EACNzO,aAAa,EACb0O,SAAU,QACVlP,YAAa,CACXmK,GAAI,GAGJD,GAAI,8CAENzJ,YAAa,QACbL,eAAgB,CACd+J,GAAI,GAGJD,GAAI,8CAENtI,iBAAkBlB,IAAWiB,KAC7BpB,mBAAoB4O,IAAU9E,MAEhC,CACEjI,IAAK,EACL6M,KAAM,EACNzO,aAAa,EACb0O,SAAU,OACVlP,YAAa,CACXmK,GAAI,GAGJD,GAAI,8CAENzJ,YAAa,QACbL,eAAgB,CACd+J,GAAI,GAGJD,GAAI,8CAENtI,iBAAkBlB,IAAW4O,MAC7B/O,mBAAoB4O,IAAU/E,QAoNnBrE,O,wkFC/df,IAeewJ,EAfKC,YAAH,KAMO,qBAAG/G,MAAkBgH,OAAOC,c,QCfvCC,EAAK,CAAEC,KAAM,KAAMC,SAAU,WA8B7BC,EAAe,CAC1BH,G,0BC1BII,EAAY,sBAcZC,EAAkBlJ,IAAMC,cAAc,CAC1CkJ,iBAAkBN,EAClBO,oBAAqB,aACrBC,mBAAoBR,EACpBS,sBAAuB,eAanBC,GATYC,SAAS9J,oWAAY+J,6BACT,IAAIC,qBAAmB,CACnDC,MAAOjK,oWAAYkK,2BAOW,SAAC,GAAkB,IAAhBvJ,EAAe,EAAfA,SAAe,EACAC,mBAAcuI,GADd,mBACzCM,EADyC,KACvBC,EADuB,OAEI9I,mBAAcuI,GAFlB,mBAEzCQ,EAFyC,KAErBC,EAFqB,OAGRhJ,mBAAqB,IAHb,mBAGzCe,EAHyC,KAG3BC,EAH2B,KAWhDb,qBAAU,WACR,IAAMoJ,EAAiBC,aAAaC,QAAQd,GAC5C,GAAIY,EAAgB,CAClB,IAAMG,EATY,SAACH,GACrB,OAAOb,EAAavD,QAAO,SAACsD,GAC1B,OAAOA,EAASD,OAASe,KACxB,GAMkBI,CAAcJ,GACjCT,EAAoBY,QAEpBZ,EAAoBP,KAErB,IAEHpI,qBAAU,WACJ0I,IACFe,QAAQC,IAAR,uCAA6ChB,EAAiBL,KAA9D,YACAsB,MAAM,UAAD,OAAWjB,EAAiBL,KAA5B,UACFuB,MAAK,SAAAC,GAAC,OAAEA,EAAEC,UAEVF,MAAK,SAACG,GACDA,EAAuBtO,KAAK4D,OAAS,EACvCwB,EAAgB,CAAC,UAEjBA,EAAgBkJ,EAAuBtO,SAG1CmO,MAAK,kBAAMf,EAAsBH,MACjCsB,OAAM,SAACC,GACNR,QAAQS,MAAM,SACdT,QAAQS,MAAMD,GACdpJ,EAAgB,CAAC,gBAGtB,CAAC6H,EAAkB7H,IAOtB,OACE,cAAC4H,EAAgBpI,SAAjB,CACEC,MAAO,CAAEoI,mBAAkBC,oBAPF,SAACwB,GAC5BxB,EAAoBwB,GACpBd,aAAae,QAAQ5B,EAAW2B,EAAW9B,OAK6BO,qBAAoBC,yBAD5F,SAGE,cAAC,IAAoBxI,SAArB,CAA8BC,MAAO,CAAEM,eAAcC,mBAArD,SAAyEjB,QCpFzE4I,EAAY,UAEZ6B,EAAe9K,IAAMC,cAAc,CAAE8K,OAAQ,KAAMC,YAAa,kBAAM,QAE5ElB,aAAae,QAAQ5B,EAAU,QAC/B,IAAMgC,EAAuB,SAAC,GAAkB,IAAhB5K,EAAe,EAAfA,SAAe,EACjBC,oBAAS,WACnC,IAAM4K,EAAoBpB,aAAaC,QAAQd,GAC/C,QAAOiC,GAAoBC,KAAKC,MAAMF,MAHK,mBACtCH,EADsC,KAC9BM,EAD8B,KAa7C,OACE,cAACP,EAAahK,SAAd,CAAuBC,MAAO,CAAEgK,SAAQC,YARtB,WAClBK,GAAU,SAACC,GAET,OADAxB,aAAae,QAAQ5B,EAAWkC,KAAKI,WAAWD,KACxCA,OAKV,SACE,cAAC,IAAD,CAAiB3J,MAAOoJ,EAASS,IAAOC,IAAxC,SAAgDpL,OCdvCqL,EANE,WAAO,IAAD,EACWzK,qBAAW6J,GAE3C,MAAO,CAAEC,OAHY,EACbA,OAESC,YAHI,EACLA,YAEcrJ,MADhBV,qBAAW0K,O,QCErBC,G,oBAAO,IAAInR,IAAU,IAkBdoR,EAAiB,SAACvQ,GAE7B,OADawQ,aAAY,SAAC7N,GAAD,OAAkBA,EAAMgB,MAAM/C,KAAKoC,MAAK,SAACC,GAAD,OAAOA,EAAEjD,MAAQA,SAuDvEyQ,EAAmB,WAK9B,IACMxP,EAAOsP,EADD,GAEZ,OAAOtP,EAAK3B,kBAAoB,IAAIH,IAAU8B,EAAK3B,mBAAqBgR,GC/E3DI,EARa,CAC1B,CACEC,MAAO,eACPC,KAAM,aACNC,KAAM,kBC2BKC,EAxBF,SAACC,GAAW,IAAD,EACcC,cAA5BlQ,EADc,EACdA,QAASmQ,EADK,EACLA,QAASC,EADJ,EACIA,MADJ,EAE4BvL,qBAAWiI,GAArDC,EAFc,EAEdA,iBAAkBC,EAFJ,EAEIA,oBAFJ,EAGUsC,IAAxBX,EAHc,EAGdA,OAAQC,EAHM,EAGNA,YACVyB,EAAeV,IAErB,OACE,cAAC,IAAD,aACE3P,QAASA,EACTsQ,MAAOH,EACPI,OAAQH,EACRzB,OAAQA,EACRC,YAAaA,EACb4B,YAAazD,GAAoBA,EAAiBL,KAClD+D,MAAO7D,EACP8D,QAAS1D,EACTqD,aAAcA,EAAa3Q,WAC3BiR,MAAOf,EACPgB,UAAU,gFACNX,K,sJCvBV,IAAMY,EAAUxL,YAAOD,IAAPC,CAAH,KAcEyL,EARc,WAC3B,OACE,cAACD,EAAD,UACE,cAAC,IAAD,OCEAE,EAAcC,gBAAK,kBAAM,uDAGzBC,EAAWD,gBAAK,kBAAM,iCAI5B3S,IAAUuR,OAAO,CACfsB,eAAgB,IAChBC,eAAgB,KAGlB,IAAMC,EAAgB,WAAO,IAAD,EACGlB,cAArBlQ,EADkB,EAClBA,QAASmQ,EADS,EACTA,QASjB,OARA9L,qBAAU,YACHrE,GAAWqR,OAAO3D,aAAaC,QAAQ,kBAC1CwC,EAAQ,cAET,CAACnQ,EAASmQ,IAKX,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAACmB,EAAD,IACA,cAAC,EAAD,UACE,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,gBAAZ,SACC,cAACT,EAAD,MAED,cAAC,IAAD,CAAOU,UAAWR,eASfrN,MAAM8N,KAAKN,G,kDCtDpBO,EAAe/N,IAAMC,cAAc,GAEnC+N,EAAuB,SAAC,GAAkB,IAAhB3N,EAAe,EAAfA,SACxB4N,EAAgBC,iBAAO,GADgB,EAEnB5N,mBAAS,GAFU,mBAEtC6N,EAFsC,KAE/BC,EAF+B,KAiB7C,OAbA3N,qBAAU,WACR,IAAM+C,EAAOC,cACP/C,EAAWC,YAAW,sBAAC,4BAAAhI,EAAA,sEACD6K,EAAKG,IAAI0K,iBADR,QACrBC,EADqB,UAEPL,EAAcM,UAChCN,EAAcM,QAAUD,EACxBF,EAASE,IAJgB,2CAM1B,KAEH,OAAO,kBAAMzN,cAAcH,MAC1B,IAEI,cAACqN,EAAajN,SAAd,CAAuBC,MAAOoN,EAA9B,SAAsC9N,K,qCClBhCmO,gBAAe,CAC5BC,UAAU/O,EACVgP,QAAS,CACPzP,MAAO0P,KACPlK,MAAOmK,QC8BIC,GA1Ba,SAAC,GAAkB,IAAhBxO,EAAe,EAAfA,SACvByO,EAASC,cACT5M,EAAUqH,SAAS9J,MACzB,OACE,cAAC,IAAD,CAAUsP,MAAOA,GAAjB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,IAAD,CACE7M,QAASA,EACT8M,WAAY,CACVC,cAAe,CAAEJ,UACjBK,OAJJ,SAOE,cAAC,EAAD,UACE,cAACpP,EAAA,EAAD,UACE,cAAC,IAAD,UAAgBM,iBCvBhC+O,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,U,6kTCX1B,mGAMMC,EAAUV,cACVW,EAAe,IAAIC,IAAKC,UAAUC,aAAaJ,EAAS,CAAEK,QAAS,MAKnErM,EAAU,WAEd,OADa,IAAIkM,IAAKD,IAGlBK,EAAc,SAAC9S,EAAU5D,EAAiB2W,GAE9C,OAAO,IADMvM,IACGE,IAAIC,UAAU3G,EAA4B5D,EAAS2W,K","file":"static/js/main.d590feb4.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport bnbRewardChefABI from 'config/abi/bnbRewardChef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress, getBNBRewardChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: (farmConfig.tokenSymbol === QuoteToken.BNB) ? [getBNBRewardChefAddress()] : [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).div(new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, mkatsPerBlock] = await multicall((farmConfig.tokenSymbol === QuoteToken.BNB) ? bnbRewardChefABI : masterchefABI, [\n        {\n          address: (farmConfig.tokenSymbol === QuoteToken.BNB) ? getBNBRewardChefAddress() : getMasterChefAddress(),\n          name: 'poolInfo',\n          params: (farmConfig.tokenSymbol === QuoteToken.BNB) ? [0] : [farmConfig.pid],\n        },\n        {\n          address: (farmConfig.tokenSymbol === QuoteToken.BNB) ? getBNBRewardChefAddress() : getMasterChefAddress(),\n          name: (farmConfig.tokenSymbol === QuoteToken.BNB) ? 'rewardPerBlock' : 'totalAllocPoint',\n        },\n        {\n          address: (farmConfig.tokenSymbol === QuoteToken.BNB) ? getBNBRewardChefAddress() : getMasterChefAddress(),\n          name: (farmConfig.tokenSymbol === QuoteToken.BNB) ? 'rewardPerBlock' : 'mkatsPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = farmConfig.pid === 100 ? allocPoint.div(allocPoint) : allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        mkatsPerBlock: new BigNumber(mkatsPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport bnbRewardChefABI from 'config/abi/bnbRewardChef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getBNBRewardChefAddress, getMasterChefAddress } from 'utils/addressHelpers'\nimport { QuoteToken } from 'config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n  const bnbRewardChefAddress = getBNBRewardChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, farm.pid === 100 ? bnbRewardChefAddress : masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n  const bnbRewardChefAddress = getBNBRewardChefAddress()\n\n  const rawStakedBalances = await Promise.all(\n    farmsConfig.map(async (farm) => {\n      let call\n      let abi\n      if (farm.pid === 100) {\n        abi = bnbRewardChefABI\n        call = {\n          address: bnbRewardChefAddress,\n          name: 'userInfo',\n          params: [account],\n        }\n      } else {\n        abi = masterchefABI\n        call = {\n          address: masterChefAdress,\n          name: 'userInfo',\n          params: [farm.pid, account],\n        }\n      }\n      const rawStakedBalance = (await multicall(abi, [call]))[0]\n      return rawStakedBalance\n    })\n  )\n\n  // const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n  const bnbRewardChefAddress = getBNBRewardChefAddress()\n\n  const rawEarnings = await Promise.all(\n    farmsConfig.map(async (farm) => {\n      let call\n      let abi\n      if (farm.tokenSymbol === QuoteToken.BNB) {\n        abi = bnbRewardChefABI\n        call = {\n          address: bnbRewardChefAddress,\n          name: 'pendingReward',\n          params: [account],\n        }\n      } else {\n        abi = masterchefABI\n        call = {\n          address: masterChefAdress,\n          name: 'pendingMkats',\n          params: [farm.pid, account],\n        }\n      }\n      const rawEarning = (await multicall(abi, [call]))[0]\n\n      return rawEarning\n    })\n  )\n\n  // const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'MKAT' = 'MKAT',\n  'MKATS' = 'MKATS',\n  'MKATMKATSLP' = 'MKAT-MKATS LP'\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n\nexport interface TokenInfo {\n  id: number,\n  tokenName: string,\n  contract: string,\n  decimals: number\n}","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getCakeAddressForMkat = () => {\n  return addresses.mkat[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getBNBRewardChefAddress = () => {\n  return addresses.bnbRewardChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryAddressForMkat = () => {\n  return addresses.lotteryForMkat[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\nexport const getLotteryTicketAddressForMkat = () => {\n  return addresses.lotteryNFTForMkat[chainId]\n}\n","export default {\n  cake: {\n    // 56: '0xF952Fc3ca7325Cc27D15885d37117676d25BfdA6',\n    // 56: '0xC5f6Fa9e193DF57272C59Bbf5AD8bAAAf9959Ec8',\n    56: '0x509949c4ee0c1c2c765cf9b23c75d823981e22ae',\n    97: '0x5f6Ef6608B3deb84A38d12Bce535Fdd6aB195A66',\n  },\n  masterChef: {\n    // 56: '0xe70E9185F5ea7Ba3C5d63705784D8563017f2E57',\n    // 56: '0xD3DdE681367D039b60bC47Eec04C69bd7cb8A266',\n    56: '0xf9F9cdcf039827C55946028606beA6aED0ff2dac',\n    97: '',\n  },\n  bnbRewardChef: {\n    56: '0x159B3859B6Cff4BDD17bcA14B81eab7E95De0c94',\n    97: '',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n  },\n  mkat: {\n    56: '0xc25d94fc3f8d7bd1d88f89802fe075338f71dec7',\n    97: '0x5f6Ef6608B3deb84A38d12Bce535Fdd6aB195A66',\n  },\n  mkats: {\n    56: '0x509949c4ee0c1c2c765cf9b23c75d823981e22ae',\n    97: '0x5f6Ef6608B3deb84A38d12Bce535Fdd6aB195A66',\n  },\n  lottery: {\n    56: '0x51985A746Cd99Ae86AD0f0A4E1263F6698566092',\n    97: '0x3Ff4508288C3680C1Def2B9fb2086E884D128381',\n  },\n  lotteryForMkat: {\n    56: '0xd07D6Cd25b59559863Feb2908800d6062dF55e07',\n    97: '0x3Ff4508288C3680C1Def2B9fb2086E884D128381',\n  },\n  lotteryNFT: {\n    56: '0x8Bf0CaBf3e08E919276A84cC510D13959F2aE467',\n    97: '0x00437da348bC99B60Bc564dEfd1e2Ca99C54Ef9e',\n  },\n  lotteryNFTForMkat: {\n    56: '0x6BEED098Abe22919C83A4Ce861e1D0549a8B6459',\n    97: '0x00437da348bC99B60Bc564dEfd1e2Ca99C54Ef9e',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n}\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  {\n    sousId: 1,\n    tokenName: 'BNB',\n    stakingTokenName: QuoteToken.MKATMKATSLP,\n    stakingTokenAddress: '0x6DF4dE646440f0Ed2e787484Fdf829E822b7b5AD',\n    contractAddress: {\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n      56: '0x6EEF3c84DE011B26CE0CB6D672526589C9ABB3E2',\n    },\n    poolCategory: PoolCategory.CORE,\n    projectLink: 'https://pancakeswap.finance/',\n    harvest: true,\n    tokenPerBlock: '10',\n    sortOrder: 1,\n    isFinished: false,\n    tokenDecimals: 18,\n  },\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingMkats('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'MKATS-BUSD LP',\n    lpAddresses: {\n      97: '',\n      // 56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\n      // 56: '0x9231984fb7b023b32c515e2425695fde81337ae8',\n      56: '0x870B37cDd7698F0561F1d085250ACa5764911046', // MKATS-BUSD\n    },\n    tokenSymbol: 'MKATS',\n    tokenAddresses: {\n      97: '',\n      // 56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n      // 56: '0xC5f6Fa9e193DF57272C59Bbf5AD8bAAAf9959Ec8',\n      56: '0x509949c4ee0c1c2c765cf9b23c75d823981e22ae', // MKATS\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'MKATS-BNB LP',\n    lpAddresses: {\n      97: '',\n      // 56: '0xd1b59d11316e87c3a0a069e80f590ba35cd8d8d3',\n      // 56: '0x05b96ee199c91d65fe7da8ba97eed97e1dd69b20',\n      56: '0x360C6A3d31cd33310778dA84CC0B23a62aDb22B4', // MKATS-BNB LP\n    },\n    tokenSymbol: 'MKATS',\n    tokenAddresses: {\n      97: '',\n      // 56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n      // 56: '0xC5f6Fa9e193DF57272C59Bbf5AD8bAAAf9959Ec8',\n      56: '0x302Cb6374D88A2FD7411a5bDfBB49cEb081A19Ae', // MKATS\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 4,\n    risk: 5,\n    lpSymbol: 'MKAT-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0xB5891f5FfB831fEefAe58e336952023D8684FBD8',\n    },\n    tokenSymbol: 'MKATS',\n    tokenAddresses: {\n      97: '',\n      56: '0xc25d94fc3f8d7bd1d88f89802fe075338f71dec7', // MKAT\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 5,\n    risk: 5,\n    lpSymbol: 'MKAT-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x7BCa66FcB7cc48186DE564F0084145230B0Ec9E5',\n    },\n    tokenSymbol: 'MKATS',\n    tokenAddresses: {\n      97: '',\n      56: '0xc25d94fc3f8d7bd1d88f89802fe075338f71dec7', // MKAT\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 6,\n    risk: 5,\n    lpSymbol: 'MKATS-MKAT LP',\n    lpAddresses: {\n      97: '',\n      56: '0x6DF4dE646440f0Ed2e787484Fdf829E822b7b5AD',\n    },\n    tokenSymbol: 'MKATS',\n    tokenAddresses: {\n      97: '',\n      56: '0xc25d94fc3f8d7bd1d88f89802fe075338f71dec7',\n    },\n    quoteTokenSymbol: QuoteToken.MKAT,\n    quoteTokenAdresses: contracts.cake,\n  },\n  // {\n  //   pid: 8,\n  //   risk: 1,\n  //   lpSymbol: 'USDT-BUSD LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd',\n  //   },\n  //   tokenSymbol: 'MKATS',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x55d398326f99059ff775485246999027b3197955',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: 'BNB-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\n    },\n    tokenSymbol: 'MKATS',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.UST,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 100,\n    risk: 5,\n    lpSymbol: 'MKATS-MKAT LP',\n    lpAddresses: {\n      97: '',\n      56: '0x6DF4dE646440f0Ed2e787484Fdf829E822b7b5AD',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xc25d94fc3f8d7bd1d88f89802fe075338f71dec7',\n    },\n    quoteTokenSymbol: QuoteToken.MKAT,\n    quoteTokenAdresses: contracts.cake,\n  },\n  // {\n  //   pid: 5,\n  //   risk: 2,\n  //   lpSymbol: 'ETH-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x70d8929d04b60af4fb9b58713ebcf18765ade422',\n  //   },\n  //   tokenSymbol: 'ETH',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n  // {\n  //   pid: 6,\n  //   risk: 1,\n  //   lpSymbol: 'DAI-BUSD LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc',\n  //   },\n  //   tokenSymbol: 'DAI',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 7,\n  //   risk: 1,\n  //   lpSymbol: 'USDC-BUSD LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x680dd100e4b394bda26a59dd5c119a391e747d18',\n  //   },\n  //   tokenSymbol: 'USDC',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 9,\n  //   risk: 3,\n  //   lpSymbol: 'DOT-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xbcd62661a6b1ded703585d3af7d7649ef4dcdb5c',\n  //   },\n  //   tokenSymbol: 'DOT',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n  // {\n  //   pid: 5,\n  //   risk: 4,\n  //   lpSymbol: 'CAKE-BUSD LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458',\n  //   },\n  //   tokenSymbol: 'CAKE',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 6,\n  //   risk: 4,\n  //   lpSymbol: 'CAKE-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xa527a61703d82139f8a06bc30097cc9caa2df5a6',\n  //   },\n  //   tokenSymbol: 'CAKE',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n  {\n    pid: 3,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'MKATS',\n    lpAddresses: {\n      97: '',\n      // 56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP\n      // 56: '0x9231984fb7b023b32c515e2425695fde81337ae8', // EGG-BUSD LP\n      56: '0x870B37cDd7698F0561F1d085250ACa5764911046', // MKATS-BUSD LP\n    },\n    tokenSymbol: 'MKATS',\n    tokenAddresses: {\n      97: '',\n      // 56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n      // 56: '0xC5f6Fa9e193DF57272C59Bbf5AD8bAAAf9959Ec8',\n      56: '0x509949c4ee0c1c2c765cf9b23c75d823981e22ae',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 7,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'MKAT',\n    lpAddresses: {\n      97: '',\n      // 56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP\n      // 56: '0x9231984fb7b023b32c515e2425695fde81337ae8', // EGG-BUSD LP\n      56: '0x6DF4dE646440f0Ed2e787484Fdf829E822b7b5AD', // MKAT-BUSD LP\n    },\n    tokenSymbol: 'MKATS',\n    tokenAddresses: {\n      97: '',\n      // 56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n      // 56: '0xC5f6Fa9e193DF57272C59Bbf5AD8bAAAf9959Ec8',\n      56: '0xc25d94fc3f8d7bd1d88f89802fe075338f71dec7',\n    },\n    quoteTokenSymbol: QuoteToken.MKATS,\n    quoteTokenAdresses: contracts.mkats,\n  },\n  // {\n  //   pid: 5,\n  //   risk: 5,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'MKATS',\n  //   lpAddresses: {\n  //     97: '',\n  //     // 56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP\n  //     // 56: '0x9231984fb7b023b32c515e2425695fde81337ae8', // EGG-BUSD LP\n  //     56: '0x870B37cDd7698F0561F1d085250ACa5764911046', // MKATS-BUSD LP\n  //   },\n  //   tokenSymbol: 'MKATS',\n  //   tokenAddresses: {\n  //     97: '',\n  //     // 56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n  //     // 56: '0xC5f6Fa9e193DF57272C59Bbf5AD8bAAAf9959Ec8',\n  //     56: '0x509949c4ee0c1c2c765cf9b23c75d823981e22ae',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 13,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'BUSD',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP (BUSD-BUSD will ignore)\n  //   },\n  //   tokenSymbol: 'BUSD',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 14,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'WBNB',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\n  //   },\n  //   tokenSymbol: 'WBNB',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 15,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'USDT',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd', // USDT-BUSD LP\n  //   },\n  //   tokenSymbol: 'USDT',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x55d398326f99059ff775485246999027b3197955',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 16,\n  //   risk: 2,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'BTCB',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xb8875e207ee8096a929d543c9981c9586992eacb', // BTCB-BUSD LP\n  //   },\n  //   tokenSymbol: 'BTCB',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 17,\n  //   risk: 2,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'ETH',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xd9a0d1f5e02de2403f68bb71a15f8847a854b494', // ETH-BUSD LP\n  //   },\n  //   tokenSymbol: 'ETH',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 18,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'DAI',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc', // DAI-BUSD LP\n  //   },\n  //   tokenSymbol: 'DAI',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 19,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'USDC',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x680dd100e4b394bda26a59dd5c119a391e747d18', // USDC-BUSD LP\n  //   },\n  //   tokenSymbol: 'USDC',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 20,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'DOT',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x54c1ec2f543966953f2f7564692606ea7d5a184e', // DOT-BUSD LP\n  //   },\n  //   tokenSymbol: 'DOT',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 21,\n  //   risk: 4,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'CAKE',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\n  //   },\n  //   tokenSymbol: 'CAKE',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 22,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'BSCX',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xa32a983a64ce21834221aa0ad1f1533907553136', // BSCX-BUSD LP\n  //   },\n  //   tokenSymbol: 'BSCX',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x5ac52ee5b2a633895292ff6d8a89bb9190451587',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 23,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'AUTO',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x4d0228ebeb39f6d2f29ba528e2d15fc9121ead56', // AUTO-BNB LP\n  //   },\n  //   tokenSymbol: 'AUTO',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0xa184088a740c695e156f91f5cc086a06bb78b827',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from 'MOONKAT_uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Russo One',  cursive,sans-serif;\n    font-weight:500;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n // ZHCN,\n // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from 'MOONKAT_uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nlocalStorage.setItem(CACHE_KEY,'true');\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceMkatsBusd = () : BigNumber => {\n  const pid = 3\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0; // EGG-BUSD LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n  return value;\n}","import { MenuEntry } from 'MOONKAT_uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'MKAT Lottery',\n    icon: 'TicketIcon',\n    href: '/lottery-mkat',\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from 'MOONKAT_uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink=\"https://testnet.bscscan.com/token/0x5f6Ef6608B3deb84A38d12Bce535Fdd6aB195A66\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from 'MOONKAT_uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from 'MOONKAT_uikit'\nimport BigNumber from 'bignumber.js'\n// import { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n// import NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\n// const Home = lazy(() => import('./views/Home'))\n// const Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\nconst MkatLottery = lazy(() => import('./views/MkatLottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const NftMarket = lazy(() => import('./views/NftMarket'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  // useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/lottery-mkat\">\n             <MkatLottery />\n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      {/* <NftGlobalNotification /> */}\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from 'MOONKAT_uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}